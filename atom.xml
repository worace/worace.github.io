<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Horace Williams</title>
 <link href="http://worace.works/atom.xml" rel="self"/>
 <link href="http://worace.works/"/>
 <updated>2021-11-17T09:34:29-08:00</updated>
 <id>http://worace.works</id>
 <author>
   <name>Horace Williams</name>
   <email>horace@worace.works</email>
 </author>

 
 <entry>
   <title>Cascading Git Branches to Reduce Mega Merges</title>
   <link href="http://worace.works/2021/11/17/cascading-git-branches/"/>
   <updated>2021-11-17T09:27:00-08:00</updated>
   <id>http://worace.works/2021/11/17/cascading-git-branches</id>
   <content type="html">&lt;p&gt;The other day some colleagues were discussing how to reduce the review burden for a PR that had grown to an unfortunate size. We’ve all been there. You start work on a feature, it turns out more complicated than you realized, then along the way you find a few things that need refactoring. Plus you really want to shore up some test coverage. And there are some files that never got auto-formatted for some reason.&lt;/p&gt;

&lt;p&gt;Before you know it you end up with one of those mega PRs that gives reviewers nightmares…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/gitdiff.png&quot; alt=&quot;Large Git Diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sometimes large, sweeping changes are unavoidable. For those cases, you should proactively schedule time with a reviewer (or multiple!) to walk through the changeset, make sure they have all the context, and are allocated sufficient time to give a thoughtful review.&lt;/p&gt;

&lt;p&gt;But often this happens by accident, as we Git-amari Damacy our way through a handful of unrelated changes. This adds unnecessary strain on a reviewer, and makes it more likely they’ll miss the important parts of what might be an otherwise simple diff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_curve.jpg&quot; alt=&quot;Git review curve&quot; /&gt;
&lt;em&gt;Many reviewers won’t have time to thoughtfully review a large diff, and will have to throw their hands up and YOLO it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The obvious answer is to split things up. But this poses another problem: our work in later steps often relies on the prior steps:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_drawing_2.jpg&quot; alt=&quot;Git changes with simultaneous Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could wait until Branch A merges to main before starting our subsequent Branch B, but we don’t want to be blocked from working on Branch A until B can be completely reviewed and merged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_drawing_1.jpg&quot; alt=&quot;Git changes with sequential Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, don’t forget that git lets you start branches from anywhere, not just your main branch, so we can just as easily start our Branch B changeset off of the existing one from Branch A:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_drawing_5.jpg&quot; alt=&quot;Git changes with cascading Branch A to B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can send a PR from A back to main, and while that’s being reviewed + merged, we can continue our work from B. Once the A PR merges, we can open a new PR from B to Main, which will now only include the diff between the end of A and main. You can do this as many times as you need to break your original mega-changeset into bite-size PRs that can be more easily reviewed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_drawing_3.jpg&quot; alt=&quot;Git changes with cascading Branch A to B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I sometimes call these “cascading” git branches.&lt;/p&gt;

&lt;p&gt;The one downside to this, is that to keep things tidy, you’ll probably want to rebase your subsequent PRs onto main after their predecessors merge. Especially if there had been comments or changes on the A branch while it was in review, you’ll want to keep the B branch up to date with these.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/git_drawing_4.jpg&quot; alt=&quot;Git changes with cascading Branch A to B&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-github-draft-prs-to-track-your-cascading-branches&quot;&gt;Using Github Draft PRs to Track Your Cascading Branches&lt;/h3&gt;

&lt;p&gt;Another useful trick to help keep track of a bunch of in-flight WIP branches like this is to use the Github PR UI to set up draft PRs from each branch not to main, but to its predecessor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/gh_pr_b_to_a.png&quot; alt=&quot;Pull Request Branch B to A&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, after you merge the initial PR (Branch A to Main), you can come back to this one, change the base branch (to main), and set it to non-draft.&lt;/p&gt;

&lt;p&gt;Handling large diffs this way requires a little foresight and some extra git finagling, but your review process will be much smoother, and your reviewers will thank you for it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSV to JSON One Liner with Ruby</title>
   <link href="http://worace.works/2021/05/05/csv-to-json-one-liner-with-ruby/"/>
   <updated>2021-05-05T00:00:00-07:00</updated>
   <id>http://worace.works/2021/05/05/csv-to-json-one-liner-with-ruby</id>
   <content type="html">&lt;p&gt;I run into this a lot and figured out a reasonably handy way to do it with built-in ruby tooling.&lt;/p&gt;

&lt;p&gt;The one-liner is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -r csv -r json -e 'CSV.new(STDIN, headers: true).each { |r| puts r.to_h.to_json }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I put it in by &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; as a function:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;csv2json &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  ruby &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; csv &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; json &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CSV.new(STDIN, headers: true).each { |r| puts r.to_h.to_json }'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I can use it like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 'a,b\n1,2' | csv2json
{&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:&quot;2&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to JAR Hell</title>
   <link href="http://worace.works/2021/04/13/jar-hell-part-2-jvm-deployment-strategies/"/>
   <updated>2021-04-13T09:40:00-07:00</updated>
   <id>http://worace.works/2021/04/13/jar-hell-part-2-jvm-deployment-strategies</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/2021/04/04/jar-hell-part-1-compilation-classpath-libraries/&quot;&gt;Part 1&lt;/a&gt;, we looked at the basic model for loading and executing code on the JVM.&lt;/p&gt;

&lt;p&gt;We saw how Classes (usually represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files) provide the basic unit for JVM code, and how the Classpath makes classes (usually organized into JARs) available to the JVM at compile- and runtime. And we saw how tools like Maven help us use external libraries by fetching them from package repositories and incorporating them into the local Classpath.&lt;/p&gt;

&lt;p&gt;But what about production deployments?&lt;/p&gt;

&lt;p&gt;The Classpath still exists regardless of whether we’re running code on our Macbook or on a server in AWS, but for production, we’d prefer to run &lt;em&gt;without&lt;/em&gt; a build tool, and ideally without any system dependencies beyond a Java Runtime Environment.&lt;/p&gt;

&lt;p&gt;In this post, we’ll look at several ways to accomplish this.&lt;/p&gt;

&lt;h3 id=&quot;preface-applications-vs-libraries&quot;&gt;Preface: Applications vs. Libraries&lt;/h3&gt;

&lt;p&gt;Software projects can be coarsely divided into 2 groups: Libraries and Applications. Libraries are consumed by other code, while Applications are meant to run on their own. On the JVM, both types of software can be packaged as JARs, but there are some common conventions around how each gets handled.&lt;/p&gt;

&lt;p&gt;In general, library JARs only contain a “shallow” bundle of compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files, meaning they include &lt;em&gt;their own&lt;/em&gt; direct code but not that of their dependencies. This is sometimes also called a “skinny” JAR.&lt;/p&gt;

&lt;p&gt;You might ask how this is useful, since if we depend on library A, and A depends on B, we obviously can’t run our application without also having B. But the answer is that the developers of A expect you to retrieve B on your own after consulting A’s dependency manifest (i.e. its Maven POM). When dealing with &lt;em&gt;libraries&lt;/em&gt; we prefer smaller, granular packages that can be managed programmatically by a build tool. This gives downstream users more flexibility to cache packages, handle dependency conflicts, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Applications&lt;/em&gt;, by contrast, are not intended for distribution to other developers or consumption by other code. Rather, they’re meant to run as standalone artifacts (e.g. they probably include a &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method).&lt;/p&gt;

&lt;p&gt;Applications require a deployment strategy which, one way or another, gets the application’s own code, along with a fully resolved Classpath containing any necessary libraries, into the target runtime environment. This type of deployment – running compiled applications along with their dependencies – is what we’re focused on in this article.&lt;/p&gt;

&lt;h2 id=&quot;deployment-for-the-jvm&quot;&gt;Deployment for the JVM&lt;/h2&gt;

&lt;p&gt;Luckily, the JVM makes the actual “run the code” portion fairly easy – as long as you don’t get too crazy with native dependencies (e.g &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Native_Interface&quot;&gt;JNI&lt;/a&gt;), or shelling out to system commands, you should be able to run your app on any server with the proper &lt;a href=&quot;https://www.oracle.com/java/technologies/javase-jre8-downloads.html&quot;&gt;JRE&lt;/a&gt; version.&lt;/p&gt;

&lt;p&gt;But you &lt;em&gt;do&lt;/em&gt; have to worry about getting all of the compiled code into the right place. There are a lot of ways to do this, so we’ll look at several options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Push JARs to a server and run&lt;/li&gt;
  &lt;li&gt;Uberjars&lt;/li&gt;
  &lt;li&gt;WAR files / J2EE&lt;/li&gt;
  &lt;li&gt;Docker Images&lt;/li&gt;
  &lt;li&gt;GraalVM Native Images&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;push-and-script&quot;&gt;Push and Script&lt;/h3&gt;

&lt;p&gt;For starters we can always just do a straightforward upload of the library JARs our build tool resolves for our Classpath, along with the one it has create for our own code.&lt;/p&gt;

&lt;p&gt;For example if we’re using Maven, we’ll end up with a classpath / run command (locally) that looks something like &lt;code class=&quot;highlighter-rouge&quot;&gt;java -cp ./target/my-app.jar:~/.m2/repository/foo.jar:~/.m2/repository/bar.jar com.mycorp.MyMainClass&lt;/code&gt;. So to run in prod, we have to push those same 3 JARs into our target environment, and run a &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command with them in the same Classpath arrangement.&lt;/p&gt;

&lt;p&gt;There are a lot of ways to achieve this, so I tend to think of it as a rough pattern more than a specific implementation.&lt;/p&gt;

&lt;p&gt;Sbt’s &lt;a href=&quot;https://github.com/sbt/sbt-native-packager&quot;&gt;native-packager plugin&lt;/a&gt; is a great example of a tool that does this really well. It can package all of your JARs into a Zip archive or tarball, along with a handy run script (you can see the &lt;a href=&quot;https://github.com/sbt/sbt-native-packager/blob/master/src/main/resources/com/typesafe/sbt/packager/archetypes/scripts/bash-template&quot;&gt;template&lt;/a&gt; for these) that will kick everything off. There are likely similar plugins for Maven or Gradle.&lt;/p&gt;

&lt;h3 id=&quot;uberfatassembly-jars&quot;&gt;Uber/Fat/Assembly JARs&lt;/h3&gt;

&lt;p&gt;As mentioned in the Libraries vs. Applications section, we’ve so far been dealing with “skinny” jars containing 1 project’s compiled code.&lt;/p&gt;

&lt;p&gt;In order to make a larger application work, we have to put a bunch of them side by side on the Classpath. This works fine, but can get annoying because you end up with dozens or even hundreds of JARs to cart around. What if you could just get it all onto &lt;em&gt;one&lt;/em&gt; JAR?&lt;/p&gt;

&lt;p&gt;It turns out JARs &lt;em&gt;can&lt;/em&gt; be used (abused?) in this way, by creating what’s called an “Uber” JAR (AKA “Assembly” or “Fat” JAR). An uberjar flattens out the compiled code from your project’s JAR, &lt;em&gt;plus the compiled code from all the JARs on its classpath&lt;/em&gt; into a single output JAR. It’s basically a whole bunch of JARs squished into one.&lt;/p&gt;

&lt;p&gt;The benefit of this is that the final product no longer has any dependencies. Its whole Classpath is just the one resulting JAR, and your whole deployment model can consist of uploading the uberjar to production and invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar my-application.jar&lt;/code&gt;. It’s sort of the JAR equivalent of building a single executable binary out of a language like Go or Rust.&lt;/p&gt;

&lt;p&gt;The simplicity of the single-file deployment strategy has made uberjars popular in recent years. They’re especially common in the Hadoop/Spark ecosystem, but get used a lot for web services or other server applications as well.&lt;/p&gt;

&lt;p&gt;Most build tools can either build uberjars out of the box or provide a plugin for doing it: &lt;a href=&quot;https://maven.apache.org/plugins/maven-shade-plugin/&quot;&gt;Maven Shade Plugin&lt;/a&gt;, &lt;a href=&quot;https://github.com/sbt/sbt-assembly&quot;&gt;sbt-assembly&lt;/a&gt;, &lt;a href=&quot;https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#uberjar&quot;&gt;Leiningen (built in)&lt;/a&gt;. Consult the README for whichever of these you’re using for more details.&lt;/p&gt;

&lt;h4 id=&quot;other-uberjar-topics&quot;&gt;Other Uberjar Topics&lt;/h4&gt;

&lt;p&gt;While the uberjar process is not conceptually so complex (unzip + rezip), in practice there are some subtleties and advanced features that can make things quite complicated, especially for larger projects. Here are a few uberjar advanced topics you may run into.&lt;/p&gt;

&lt;h5 id=&quot;resource-deduplication&quot;&gt;Resource Deduplication&lt;/h5&gt;

&lt;p&gt;In addition to the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files, JARs can also contain other non-code files called “resources”. These could be configuration files, static assets, etc., and can be accessed programmatically via Java &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html&quot;&gt;APIs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The catch is that resource files in a JAR have to be unique (by path), so when you squash all your deps into a single uberjar, you’ll likely run into conflicts that have to be resolved. Different tools have different ways of configuring this, but it’s common to specify a “Merge Strategy” for handling these conflicts. For example here’s &lt;a href=&quot;https://github.com/sbt/sbt-assembly#merge-strategy&quot;&gt;sbt-assembly’s docs on the subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Depending on your application and what libraries you’re using, Resource Deduplication can either be a minor annoyance or a huge headache. For example a lot of JARs include metadata files like &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/manifest.mf&lt;/code&gt; that can be discarded – no big deal. But you can also find collisions between important configuration files which lead to creative workarounds like concatenating and hoping the combined file will satisfy both of the libraries that provided it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; This article has prompted some interesting discussion around the Pros and Cons of the mult-JAR vs Uberjar strategies with regard to resource collisions. &lt;a href=&quot;https://github.com/worace/multi-jar-vs-uberjar-resources&quot;&gt;Here is an example Github Repo&lt;/a&gt; demonstrating some of these issues. TL;DR multi-JAR Classpaths are still prone to resource collisions, they just will often happen silently with a “first one wins” strategy. So building an Uberjar &lt;em&gt;can&lt;/em&gt; be a benefit in these cases because most build tools will warn you about these conflicts force you to resolve them at build time.&lt;/p&gt;

&lt;h5 id=&quot;shading&quot;&gt;Shading&lt;/h5&gt;

&lt;p&gt;Shading is a technique for dealing with certain kinds of dependency conflicts by relocating code from one version of a package into a different namespace, thus allowing it to coexist with another version of itself.&lt;/p&gt;

&lt;p&gt;Shading comes up a lot in the context of Uberjars, because large Uberjars tend to produce the conditions where shading is necessary. But shading can be applied just as well to library JARs, and some library publishers consider it good etiquette to shade copies of commonly used libraries they depend on (Guava, anyone?) as a means of saving downstream users from potential dependency conflicts. But the rules and conventions around all this are fuzzy, so what you encounter in the wild may vary.&lt;/p&gt;

&lt;p&gt;One point however is worth emphasizing: &lt;strong&gt;If you’re going to bundle Classes you don’t own into a JAR you’re publishing, you should shade them&lt;/strong&gt;. Ideally you really wouldn’t do this at all, but sometimes people get into a bind and have to bundle a transitive dependency for whatever reason. Shading in these cases can save your consumers from unresolvable dependency conflicts.&lt;/p&gt;

&lt;p&gt;Shading is a complex topic in its own right so we’ll cover it more in Part 3, which focuses on dependency conflicts and classpath pathologies. In the meantime here are some good resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@akhaku/java-class-shadowing-and-shading-9439b0eacb13&quot;&gt;Java Class Shadowing and Shading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/297276/what-is-a-shaded-java-dependency&quot;&gt;Stack Exchange: What is a “shaded” Java dependency?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;war-files-and-j2ee&quot;&gt;WAR Files and J2EE&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E19199-01/816-6774-10/a_war.html&quot;&gt;WAR Files&lt;/a&gt; are a special JAR variant used for deploying certain types of Java web applications in the J2EE ecosystem. J2EE is a whole can of worms that I honestly don’t know much about, nor am I very interested in learning. But it does come up a lot so it’s worth touching on here.&lt;/p&gt;

&lt;p&gt;In short, these applications are designed to deploy not to generic VMs (like a bare Ubuntu EC2 instance with &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; installed) but rather into specialized Java-based &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_application_servers#Java&quot;&gt;Application Servers&lt;/a&gt;, like &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Apache Tomcat&lt;/a&gt;. Your company would run one or more of these Tomcat instances, which get treated as shared infrastructure, and individual applications get pacakged into WARs and deployed into a pre-existing App Server, probably along with a bunch of other application WAR files.&lt;/p&gt;

&lt;p&gt;The Application Server manages your app’s lifecycle, along with providing some shared system services, and because of these interactions extra care must be taken to ensure the 2 components cooperate well, which is what the WAR spec provides.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://javapipe.com/blog/tomcat-application-server/&quot;&gt;This article&lt;/a&gt; gives a good overview of this whole system. &lt;a href=&quot;https://octopus.com/blog/application-server-vs-uberjar&quot;&gt;Here’s another good one&lt;/a&gt; about WARs specifically.&lt;/p&gt;

&lt;p&gt;Despite my skepticism and poorly masked disdain for all this, it is kind of amusing to read about. If you squint right, running WARs via Tomcat isn’t so different from running “pods” of “containers” on abstracted machines via kubernetes, just with a lot more enterprise-y pocket protector vibes.&lt;/p&gt;

&lt;p&gt;And the decline of one is certainly related to the rise of the other – while there are plenty of J2EE deployments running out there, much of the industry has moved away from this model. These days people care more about cloud portability and deployment standardization (e.g. running with Docker or deploying via the &lt;a href=&quot;https://12factor.net/&quot;&gt;12 Factor Model&lt;/a&gt;). This makes highly customized, language-specific infrastructure less appealing than a giant uberjar you can run with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&quot;docker-and-container-images&quot;&gt;Docker and Container Images&lt;/h3&gt;

&lt;p&gt;Ironically one of Java’s initial selling points – simplicity of deployment – has been somewhat diminished by the proliferation of Docker. Now that everyone’s prod environments are “BYO Container” anyway, the benefit of just putting the JRE on all your servers doesn’t matter as much.&lt;/p&gt;

&lt;p&gt;Nevertheless, the JVM runs just fine in Docker, and in many cases, you can grab an appropriate base image (like &lt;a href=&quot;https://hub.docker.com/_/openjdk&quot;&gt;OpenJDK&lt;/a&gt;), stuff your JARs into it, and go.&lt;/p&gt;

&lt;p&gt;However it’s worth emphasizing: using Docker doesn’t change the fundamental JVM equation of Java Runtime + Classpath full of JARs = Application. The only difference is now the base image provides the JRE, and you’ll be loading your Classpath JARs into a container image rather than onto a bare server or VM.&lt;/p&gt;

&lt;p&gt;So usually you’ll be putting into your Docker image some variation of one of the previous models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put your compiled code and all your dependencies into a docker image and include an entrypoint command that invokes them with the proper settings and Classpath. Basically the “Push &amp;amp; Script” strategy but in Docker. (sbt’s &lt;a href=&quot;https://www.scala-sbt.org/sbt-native-packager/formats/docker.html&quot;&gt;native-packager&lt;/a&gt; plugin does this)&lt;/li&gt;
  &lt;li&gt;Build an uberjar and put it in a JDK docker image. Your Dockerfile &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; setting will be something like &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar /path/to/that.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Use a dedicated Java-to-Container build plugin like &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Google’s Jib&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jib-java-specific-container-image-builds&quot;&gt;Jib: Java-specific Container Image Builds&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Jib&lt;/a&gt; is a new-ish project providing a pure-Java build tool for the &lt;a href=&quot;https://github.com/opencontainers/image-spec&quot;&gt;OCI Image Spec&lt;/a&gt;. This is interesting for a few reasons.&lt;/p&gt;

&lt;p&gt;First, because it’s implemented in Java, Jib integrates into existing JVM build tools. Normally, running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; requires an RPC connection to a Docker daemon process on your machine. You need to have Docker installed, and the build process has to copy things back and forth between the daemon and the docker client. Jib allows you to sidestep all this and keep things entirely within your Maven or Gradle build.&lt;/p&gt;

&lt;p&gt;Second, by targeting Java applications specifically (rather than providing a general-purpose container build tool) Jib is able to make some creative optimizations like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot;&gt;distroless&lt;/a&gt; base images that contain &lt;em&gt;only&lt;/em&gt; the JVM (not even a full OS!) which makes your images a lot smaller&lt;/li&gt;
  &lt;li&gt;Taking better advantage of image layering by splitting your dependencies (which tend to change less) into a separate layer from your classes (which change often). This gives you faster incremental builds since most builds only require re-building the smaller application layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to these tricks, Jib images are usually smaller and build faster than traditional Docker + Dockerfile-based images.&lt;/p&gt;

&lt;p&gt;More info on Jib:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H6gR_Cv4yWI&quot;&gt;Jib presentation from Oreilly Velocity 2018&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/topics/developers-practitioners/comparing-containerization-methods-buildpacks-jib-and-dockerfile&quot;&gt;GCP Blog Post on JVM Containerization Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/jib-dockerizing&quot;&gt;Baeldung on using Jib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;graalvm-native-images&quot;&gt;GraalVM Native Images&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; is an alternative JVM runtime with some really cool features, one of which is the ability to do Ahead-of-Time compilation of JVM bytecode.&lt;/p&gt;

&lt;p&gt;Traditionally, the JVM uses a JIT compiler to turn bytecode into native machine code at runtime. But Graal lets us do this at build time, which opens up the possibility of packaging JVM applications into self-contained, platform-specific executables, called &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/&quot;&gt;Native Images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A native image includes all of your application’s code, its dependencies, plus the necessary Java Runtime bits like the standard library and the garbage collector. It’s all there in one standalone binary package, so you don’t even need to have &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; installed anymore.&lt;/p&gt;

&lt;p&gt;Because the runtime doesn’t have to JIT all your code at startup, the resulting program also starts &lt;em&gt;much&lt;/em&gt; faster and requires less memory than traditional JVM programs, making it appealing for use cases like CLI utilities where the JVM previously was not a great fit.&lt;/p&gt;

&lt;p&gt;While JVM CLIs are cool, the Industry is mostly excited about native images for a different reason: &lt;strong&gt;Serverless&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Everyone wants to stuff their Java programs into a Lambda/Cloud Run/whatever function and use them on-demand, but this doesn’t work well if your bloated app takes 30 seconds to boot. So native image provides a path to running Java programs in these environments.&lt;/p&gt;

&lt;p&gt;So what’s the catch? Well there are 2 main ones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Restrictions of the native image AOT process mean that some runtime features like reflection don’t work well or at all. In some cases there are workarounds but YMMV. &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/Reflection/&quot;&gt;Consult the docs&lt;/a&gt;. (&lt;strong&gt;Side note&lt;/strong&gt;: Ironically this has led to a wave of backpedalling across the industry, as everyone scrambles to get things like Spring running without reflection. Suddenly reflection is bad and compile time abstractions are cool in Java.)&lt;/li&gt;
  &lt;li&gt;So far, native image performance is at &lt;a href=&quot;https://github.com/oracle/graal/issues/1069#issuecomment-473649871&quot;&gt;least different, and generally slightly worse&lt;/a&gt;, than traditional JVMs. The AOT process is able to make fewer optimizations than the traditional JIT, so your “warmed up” throughput will usually be worse. There are some workarounds, like &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/PGO/&quot;&gt;PGO&lt;/a&gt;, and this landscape continues to evolve, so again, do your research.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GraalVM is really an amazing technological advancement for the JVM. It’s the kind of thing that Java developers 15 years ago would not have believed to be possible. Will be very interesting to see where this and similar advancements take us in the coming years.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So there’s your crash course in JVM app packaging. There are a ton of details surrounding this topic, so we’ve inevitably had to skip over a lot. But hopefully it provides an overview of the landscape, and serves as a starting point to make informed further research elsewhere.&lt;/p&gt;

&lt;p&gt;What’s next? I’m sure you must be thinking: “&lt;em&gt;Wow, with a rock-solid runtime and so many great deployment options, surely everything must work perfectly in production?&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Ha! If only! Just whisper the words &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNotFoundException&lt;/code&gt; to a Java developer and see how they react.&lt;/p&gt;

&lt;p&gt;Unfortunately, it does not, in fact, all work perfectly in production. To learn more about this, stay tuned for &lt;strong&gt;Part 3&lt;/strong&gt;, in which we will descend into Classpath Hell, and hopefully emerge singed, but enlightened.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to JAR Hell</title>
   <link href="http://worace.works/2021/04/04/jar-hell-part-1-compilation-classpath-libraries/"/>
   <updated>2021-04-04T19:26:00-07:00</updated>
   <id>http://worace.works/2021/04/04/jar-hell-part-1-compilation-classpath-libraries</id>
   <content type="html">&lt;p&gt;The JVM is a big tent. Maybe you’re a seasoned veteran who’s lived through everything from Applets to J2EE. Or maybe you’re a weirdo who came in through Clojure, only to find that love for parentheses and immutable data structures was a slippery slope into Classpath troubleshooting (🙋).&lt;/p&gt;

&lt;p&gt;This article is targeted at the latter group, and aims to provide a crash course in JVM app packaging for newcomers to the platform. We’ll cover compilation basics, the Classpath, JARs, &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;, and the Maven dependency model. This is less about accomplishing specific build tasks and more about developing a mental model for how code gets packaged and distributed on the JVM.&lt;/p&gt;

&lt;p&gt;This is Part 1 in a series, so stay tuned for Part 2, which will cover deployment strategies for JVM applications, and Part 3, which will look at the many ways your Classpath can get screwy in larger projects.&lt;/p&gt;

&lt;h2 id=&quot;java-and-the-jvm-class-model&quot;&gt;Java and the JVM Class Model&lt;/h2&gt;

&lt;p&gt;As you may recall from “Java 101”, Java code runs on the &lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;V&lt;/strong&gt;irtual &lt;strong&gt;M&lt;/strong&gt;achine. These days, the JVM has evolved into a powerful &lt;a href=&quot;http://openjdk.java.net/projects/mlvm/summit2019/&quot;&gt;polyglot runtime&lt;/a&gt; that hosts a variety of non-Java languages. But it was originally created expressly for the purpose of running Java, and the 2 share a lot of common design choices.&lt;/p&gt;

&lt;p&gt;On the JVM, as in Java, &lt;em&gt;everything&lt;/em&gt; is a class, and the fundamental unit of code for the JVM is a &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; file. The JVM can’t run &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt; (or any other language) source files directly – they must first be turned into &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files by a compiler.&lt;/p&gt;

&lt;p&gt;A Classfile contains a binary representation of a class, following a structure defined by the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html&quot;&gt;JVM Spec&lt;/a&gt;. It includes slots for Class-y things like constructors, constants, fields, and methods. Most importantly, it contains our actual code, represented as &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_bytecode&quot;&gt;JVM Bytecode&lt;/a&gt;, which describes our program using the JVM’s internal &lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html&quot;&gt;instruction set&lt;/a&gt;, analogous to the machine-level instruction set hardwired into your &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_instruction_listings&quot;&gt;x86&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture#Instruction_set&quot;&gt;ARM&lt;/a&gt; CPU. The definition of a “Class” can get surprisingly elastic on the JVM, but all code we run ultimately gets funneled through this format.&lt;/p&gt;

&lt;p&gt;Java Class? Turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;. Scala &lt;a href=&quot;https://www.toptal.com/scala/scala-bytecode-and-the-jvm&quot;&gt;Anonymous Function&lt;/a&gt;? Given a funny name and turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;.
Clojure REPL expressions? Processed by the Clojure compiler and turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;, albeit &lt;a href=&quot;http://blog.kdgregory.com/2016/05/how-and-when-clojure-compiles-your-code.html&quot;&gt;at runtime, and probably without even writing it to disk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this is just scratching the surface of a complex topic full of nuances. For one thing the conventions and state of the art around these things continue to evolve (newer versions of Scala actually &lt;em&gt;don’t&lt;/em&gt; generate &lt;a href=&quot;https://www.scala-lang.org/news/2.12.0/#java-8-style-bytecode-for-lambdas&quot;&gt;standalone classes for anonymous functions&lt;/a&gt; because they use Java 8’s &lt;a href=&quot;https://www.infoq.com/articles/Invokedynamic-Javas-secret-weapon/&quot;&gt;invokedynamic&lt;/a&gt; instead). And for another there are always exceptions (as the Clojure example demonstrates, you can in fact generate Bytecode at runtime rather than including it in a pre-compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; file, and this is especially common in dynamic languages like Clojure or &lt;a href=&quot;https://realjenius.com/2009/10/06/distilling-jruby-the-jit-compiler/&quot;&gt;JRuby&lt;/a&gt;). So we often use the term “Classfile” to describe the JVM’s class model and binary format, even though it doesn’t always require a physical &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;But, &lt;em&gt;in general&lt;/em&gt;, especially if you’re working in a statically compiled language like Java or Scala, most things will get turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; file at compile time. As we’ll see, managing the generation, organization, and interaction of Classfiles is one of the fundamental tasks for JVM build tools and deployment workflows, so keeping them in mind is a useful model to understand how these processes work.&lt;/p&gt;

&lt;h2 id=&quot;making-classes&quot;&gt;Making Classes&lt;/h2&gt;

&lt;p&gt;In practice, we usually deal with &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; compilation through build tools, but the simplest way to produce one is by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; (or another JVM lang compiler) directly:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hello.java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ javac Hello.java

$ ls
Hello.class     Hello.java

$ java Hello # run our newly compiled program
Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; compiles our &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.java&lt;/code&gt; source into a corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.class&lt;/code&gt;. When we run a java command like &lt;code class=&quot;highlighter-rouge&quot;&gt;java Hello&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; we’re specifying is actually the name of a Class, and the JVM will execute the code it contains (specifically, starting with its &lt;a href=&quot;http://tutorials.jenkov.com/java/main-method.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html&quot;&gt;javap&lt;/a&gt; is a disassembler for Classfiles, which can give you some interesting output on these files if you want to poke around further.&lt;/p&gt;

&lt;h2 id=&quot;classloading-and-the-classpath&quot;&gt;Classloading and the Classpath&lt;/h2&gt;

&lt;p&gt;We gave the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; executable 1 argument, the name of our class, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;, and it was able to run our program. How does this work?&lt;/p&gt;

&lt;p&gt;Just as your shell has a &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; variable which tells it where to look for executables, the JVM uses a setting called the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/environment/paths.html&quot;&gt;“Classpath”&lt;/a&gt; to determine where to find &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files corresponding to new classes. The Classpath is a simple concept, but it’s fundamental to how real-world JVM applications run (or, frequently, crash due to Classpath problems).&lt;/p&gt;

&lt;p&gt;By default the Classpath is simply &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;.&quot;&lt;/code&gt;, the current directory. Our previous example works because the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.class&lt;/code&gt; definition matching the class named &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files are named for the Class they contain) is sitting in the current directory, which is on the Classpath, and the JVM is able to find it.&lt;/p&gt;

&lt;h3 id=&quot;package-and-directory-conventions&quot;&gt;Package and Directory Conventions&lt;/h3&gt;

&lt;p&gt;So we can compile and run a trivial example with 1 class, but what about when there are more of them, and they want to interact?&lt;/p&gt;

&lt;p&gt;In practice, Java code is usually organized into packages (that’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mycorp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;/code&gt; you see at the top of all your company’s Java files), and there’s a &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/package/managingfiles.html&quot;&gt;convention&lt;/a&gt; of expecting &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files on the Classpath to be organized in a directory structure that matches their package hierarchy.&lt;/p&gt;

&lt;p&gt;So, a more realistic example of a simple source / class tree might be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./example/Pizza.java&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;example.Calzone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Calzone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./example/Calzone.java&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calzone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yummm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have 2 classes interacting via an import. We can compile the whole structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ javac example/*.java
$ tree .
.
└── example
    ├── Calzone.class
    ├── Calzone.java
    ├── Pizza.class
    └── Pizza.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And execute it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java example.Pizza
yummm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This loads 2 of our classes: &lt;code class=&quot;highlighter-rouge&quot;&gt;example.Pizza&lt;/code&gt;, which we triggered explicitly, and &lt;code class=&quot;highlighter-rouge&quot;&gt;example.Calzone&lt;/code&gt;, which &lt;code class=&quot;highlighter-rouge&quot;&gt;example.Pizza&lt;/code&gt; imports. In both cases, the JVM is able to find these by traversing the classpath (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;.&quot;&lt;/code&gt;, the default) to find the corresponding class files (&lt;code class=&quot;highlighter-rouge&quot;&gt;Pizza.class&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Calzone.class&lt;/code&gt;, matching their class names) under the directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;./example/&lt;/code&gt;) which corresponds to their package name.&lt;/p&gt;

&lt;p&gt;You can actually watch the JVM work through this process on the fly using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:+TraceClassLoading&lt;/code&gt; debug flag. Running it on even a simple program will include a lot of noise from various system classes being loaded, but if you filter the results to our package you’ll see it loading the 2 classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -XX:+TraceClassLoading example.Pizza | rg example
[Loaded example.Pizza from file:/home/worace/scratch/jar-hell/]
[Loaded example.Calzone from file:/home/worace/scratch/jar-hell/]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;packaging-classes-into-jar-files&quot;&gt;Packaging Classes into JAR Files&lt;/h2&gt;

&lt;p&gt;So using manual &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; commands and some careful directory organization, we can produce a Classpath which gives the runtime what it wants:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One (or more) searchable base directories containing…&lt;/li&gt;
  &lt;li&gt;Class files organized into subdirectories according to their package hierarchy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If needed, we could even wire up a crude deployment system from this by just &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt;-ing our whole directory to a server, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;-ing into it, and running &lt;code class=&quot;highlighter-rouge&quot;&gt;java Foo&lt;/code&gt;. And JVM code certainly &lt;em&gt;can&lt;/em&gt; be deployed this way.&lt;/p&gt;

&lt;p&gt;But, carting around &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; trees manually gets tedious, so they created a specification for packaging them into more organized bundles, called &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jarGuide.html&quot;&gt;JAR files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A JAR is basically a Zip archive (you can literally unpack them with &lt;code class=&quot;highlighter-rouge&quot;&gt;unzip&lt;/code&gt;) containing a tree of class files along with some metadata. You can see how they work yourself by pulling one from a public package archive and unpacking it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://repo1.maven.org/maven2/ch/hsr/geohash/1.3.0/geohash-1.3.0.jar
$ unzip geohash-1.3.0.jar
Archive:  geohash-1.3.0.jar
   creating: META-INF/
  inflating: META-INF/MANIFEST.MF
   creating: ch/
   creating: ch/hsr/
   creating: ch/hsr/geohash/
   creating: ch/hsr/geohash/util/
  inflating: ch/hsr/geohash/util/VincentyGeodesy.class
  inflating: ch/hsr/geohash/util/LongUtil.class
  # etc...

$ tree ch
ch
└── hsr
    └── geohash
        ├── GeoHash.class
        └── util
            ├── LongUtil.class
            └── VincentyGeodesy.class
            # etc...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/deployment/jar/view.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; executable&lt;/a&gt; to see similar output without actually unzipping the file: &lt;code class=&quot;highlighter-rouge&quot;&gt;jar tf blah.jar&lt;/code&gt; for example will list out all of the contained files.&lt;/p&gt;

&lt;p&gt;Everything under &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/&lt;/code&gt; is metadata describing the packaged code, while the tree of class files corresponds to the compiled representations of the Java sources you can find &lt;a href=&quot;https://github.com/kungfoo/geohash-java&quot;&gt;here on github&lt;/a&gt;. If you examine the code in that repo, you’ll see the package names and source directory structure match the &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; tree in this JAR, just like our &lt;code class=&quot;highlighter-rouge&quot;&gt;example.Calzone&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;./example/Calzone.class&lt;/code&gt; tree matched before.&lt;/p&gt;

&lt;p&gt;Many JVM tools understand JARs, meaning you &lt;strong&gt;can use them directly as part of your classpath&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Launch the scala repl with this JAR on the classpath&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and import a class it contains&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scala &lt;span class=&quot;nt&quot;&gt;-classpath&lt;/span&gt; geohash-1.3.0.jar
scala&amp;gt; import ch.hsr.geohash.GeoHash
import ch.hsr.geohash.GeoHash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As with your shell’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; variable, you can include multiple Classpath entries by separating them with &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;. For example, if your project depended on several external libraries, you could utilize them all like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;java -cp /path/to/lib1.jar:/path/to/lib2.jar:/path/to/lib3.jar com.example.MyClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But, managing lists of JARs for a Classpath by hand also gets tedious, so in practice most of this generally gets done using a build tool…&lt;/p&gt;

&lt;h2 id=&quot;from-classfiles-in-a-trenchcoat-to-genuine-dependency-semantics&quot;&gt;From ClassFiles in a trenchcoat to genuine dependency semantics&lt;/h2&gt;

&lt;p&gt;On the JVM, a “library” or “dependency” is 3rd party code (as usual, packaged in a JAR) which we want to use in our own projects. As lazy programmers we love the idea of having code already written for us, but unfortunately managing dependencies for software projects can get complicated.&lt;/p&gt;

&lt;p&gt;We identify the libraries we want to use and figure out where on the internet to find them, only to then discover that our dependencies &lt;em&gt;have dependencies of their own!&lt;/em&gt; So the whole thing has to be repeated down a potentially very complex tree. We need another level of tooling to manage this for us.&lt;/p&gt;

&lt;p&gt;In fact, Java originally shipped without a set convention for managing library dependencies, largely because it predated many of the approaches we’ve developed to this problem over the last 25 years. While the JAR format gives us a way to bundle compiled JVM code, it doesn’t include a mechanism for describing the relationship &lt;em&gt;between&lt;/em&gt; multiple JARs, and these semantics, including versioning, repository management, conflict resolution, etc, had to be filled in over time by community tooling.&lt;/p&gt;

&lt;p&gt;After several iterations, including tools like &lt;a href=&quot;https://ant.apache.org/&quot;&gt;Ant&lt;/a&gt;, not to mention home-grown systems involving FTP-ing or even emailing JAR files around, &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Apache Maven&lt;/a&gt; eventually emerged as a de facto standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amusing side note&lt;/strong&gt;: While I’m sure Ant was great in its time, it eventually became so loathed in some circles that it inspired Clojure’s build tool to be &lt;a href=&quot;https://github.com/technomancy/leiningen/blob/master/README.md#leiningen&quot;&gt;named&lt;/a&gt; after a &lt;a href=&quot;https://en.wikipedia.org/wiki/Leiningen_Versus_the_Ants&quot;&gt;German Short Story&lt;/a&gt; in which the protagonist battles a horde of ants in the Brazilian jungle. 🐜&lt;/p&gt;

&lt;h3 id=&quot;mavens-library-model&quot;&gt;Maven’s Library Model&lt;/h3&gt;

&lt;p&gt;Maven is a powerful build tool which remains popular in its own right, but we’re mostly interested in its approach to library and dependency management. Maven’s conventions here have become widely accepted throughout the JVM ecosystem. Even if you’re not working with Maven itself, you’re bound to encounter Maven-style libraries and patterns, and it’s helpful to understand how they work.&lt;/p&gt;

&lt;p&gt;In Maven’s model, a library consists of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A JAR containing compiled JVM class files. Maven-style library JARs generally contain only the library’s own code, sometimes called a “thin” JAR.&lt;/li&gt;
  &lt;li&gt;A project identifier consisting of a Group ID, Artifact ID, and version. This serves as a unique coordinate for a package in a repository. Many JVM developers follow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_domain_name_notation&quot;&gt;“Reverse Domain Name”&lt;/a&gt; convention to avoid collisions in package names.&lt;/li&gt;
  &lt;li&gt;A list of dependencies, expressed in the same Group/Artifact/Version format&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maven uses an XML-based Manifest format, called the &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-the-pom.html&quot;&gt;POM&lt;/a&gt;, or Project Object Model, to describe items 2 and 3. A project’s POM gets written into a &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file, often in the root of a project, and functions similarly to things like &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;gemspec&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; that you may have seen in other build systems.&lt;/p&gt;

&lt;p&gt;Here’s an example &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; that defines a project with group &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example&lt;/code&gt;, artifact &lt;code class=&quot;highlighter-rouge&quot;&gt;my-app&lt;/code&gt;, version &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0&lt;/code&gt;, and a single dependency, &lt;code class=&quot;highlighter-rouge&quot;&gt;ch.hsr.geohash&lt;/code&gt; version 1.3.0:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;my-app&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.hsr&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;geohash&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.3.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dependency-resolution--classpath-management&quot;&gt;Dependency Resolution + Classpath Management&lt;/h3&gt;

&lt;p&gt;The POM &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dependencies/&amp;gt;&lt;/code&gt; list allows us to encode dependency graphs alongside JARs of compiled code. To share a Java library, you can publish your JAR plus a POM to a public package repository like &lt;a href=&quot;https://repo.maven.apache.org/maven2/&quot;&gt;Maven Central&lt;/a&gt;. (Aside: package repositories often rename this file to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;group&amp;gt;-&amp;lt;artifact&amp;gt;-&amp;lt;version.pom&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;, which is helpful because you don’t end up with 100 identically named &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; files, so you can e.g. package them into a JAR as resource files). Then, other users can retrieve both of these files, use the attached &lt;code class=&quot;highlighter-rouge&quot;&gt;.pom&lt;/code&gt; to identify additional transitive dependencies, and repeat the process until they’ve resolved the full tree.&lt;/p&gt;

&lt;p&gt;Finally, once the build tool has resolved and downloaded all your dependencies, it can use the POM tree to automatically assemble a Classpath for compiling and running your project’s code. &lt;strong&gt;One of the build tool’s many responsibilities is flattening your dependency &lt;em&gt;tree&lt;/em&gt;, via deduplication and version conflict resolution, into a &lt;em&gt;list&lt;/em&gt;, where each individual package only appears once&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are certainly a lot of pitfalls along this path (e.g. what happens if you depend on 2 libraries A and B which both depend on different versions of library C), which we’ll look at more in Part 3. But optimistically, on the happy path, this process allows Maven (or another build tool) to programmatically turn a list of libraries contained in a dependency list into a usable Classpath.&lt;/p&gt;

&lt;p&gt;So while we looked before at specifying a Classpath manually, like &lt;code class=&quot;highlighter-rouge&quot;&gt;java -cp /path/to/lib1.jar:/path/to/lib2.jar com.example.MyClass&lt;/code&gt;, in practice that process will almost always be managed by a build tool. When you run something like &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn test&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn compile&lt;/code&gt;, the Classpath is still there. But Maven is handling it for you, automatically, based on the information in your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can see this at work by examining your project’s Classpath directly. Here’s an example from the geohash-java project we saw before:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mvn dependency:build-classpath
# ...
[INFO] Dependencies classpath:
/Users/worace/.m2/repository/junit/junit/4.13.1/junit-4.13.1.jar:/Users/worace/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most build tools use some sort of local cache directory to save copies of remote dependencies, which for Maven is &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.m2&lt;/code&gt;. So the packages we see here in directories like &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/&amp;lt;ME&amp;gt;/.m2/repository/...&lt;/code&gt; are libraries that it has fetched from a remote source.&lt;/p&gt;

&lt;h3 id=&quot;maven-and-the-broader-ecosystem&quot;&gt;Maven and the Broader Ecosystem&lt;/h3&gt;

&lt;p&gt;Over the years a number of other build tools have been developed for the JVM: &lt;a href=&quot;https://leiningen.org/&quot;&gt;Leiningen (Clojure)&lt;/a&gt;, &lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;sbt (scala)&lt;/a&gt;, &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle (groovy, kotlin, etc)&lt;/a&gt;, not to mention the “monorepo” tools like &lt;a href=&quot;https://www.pantsbuild.org/&quot;&gt;Pants&lt;/a&gt; and &lt;a href=&quot;https://bazel.build/&quot;&gt;Bazel&lt;/a&gt;. But they all follow the same basic model: use a project spec to recursively retrieve library JAR files + dependency manifests, then generate a Classpath to use these libraries for compiling and running local source code.&lt;/p&gt;

&lt;p&gt;And while these tools all have their own semantics, special features, and configuration files (&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;project.clj&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;, etc), they generally still support Maven’s &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; as a standard interoperable dependency manifest format. So often when we speak of “Maven libraries”, we don’t necessarily mean “projects directly managed by the Maven build tool”, but simply libraries built and distributed in keeping with the conventions Maven established.&lt;/p&gt;

&lt;h2 id=&quot;summary-and-next-steps&quot;&gt;Summary and Next Steps&lt;/h2&gt;

&lt;p&gt;So to recap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compilers (&lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scalac&lt;/code&gt;, etc) turn language source code into bytecode (&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files) which the JVM can run&lt;/li&gt;
  &lt;li&gt;JAR files bundle compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; files into manageable packages&lt;/li&gt;
  &lt;li&gt;Project manifests like a &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; attach library versioning + dependency semantics to bundled JAR packages&lt;/li&gt;
  &lt;li&gt;Build tools use this dependency info to retrieve required packages for your project and programmatically assemble a Classpath for compiling, testing, and running your code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s next? Well, this system gives us a great workflow for local development, but it’s very reliant on the build tool, which we’d ideally omit in production.&lt;/p&gt;

&lt;p&gt;In the spirit of Java’s infamous “write once run anywhere” promise, we’d love to bundle our application so that in production all it requires is a suitable Java runtime – no Maven/sbt/gradle, and no repeating all of these steps around dependency resolution and Classpath generation. In Part 2, we’ll look at some of the popular techniques for achieving this.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Cats Effect Resource in Non-Functional Contexts</title>
   <link href="http://worace.works/2021/03/25/cats-effect-resource-in-imperative-contexts/"/>
   <updated>2021-03-25T00:00:00-07:00</updated>
   <id>http://worace.works/2021/03/25/cats-effect-resource-in-imperative-contexts</id>
   <content type="html">&lt;h3 id=&quot;summary--tldr&quot;&gt;Summary / TL;DR&lt;/h3&gt;

&lt;p&gt;Use &lt;a href=&quot;https://typelevel.org/cats-effect/api/cats/effect/Resource.html#allocated[G[x]%3E:F[x],B%3E:A](implicitF:cats.effect.BracketThrow[G]):G[(B,G[Unit])]&quot;&gt;Resource.allocated&lt;/a&gt; to integrate &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.Resource&lt;/code&gt; into non-FP contexts such as a test framework setup/teardown methods or traditional callback-driven APIs. But be cautious in doing so, as it’s now your responsibility to make sure the provided finalizer gets called at the appropriate time.&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://typelevel.org/cats-effect/datatypes/resource.html&quot;&gt;Cats Effect Resource&lt;/a&gt; is an excellent tool for managing resource lifecycles in Scala. It provides something similar to Python’s &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#the-with-statement&quot;&gt;‘with’ helper&lt;/a&gt; or Java’s &lt;a href=&quot;https://www.baeldung.com/java-try-with-resources&quot;&gt;Try With Resources&lt;/a&gt; but in a functional API that plays nice with &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.IO&lt;/code&gt; or other pure effect types in Scala.&lt;/p&gt;

&lt;p&gt;There are several ways to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; but my preference is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource.make&lt;/code&gt;, which follows a familiar “acquire” / “release” pattern:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.effect.IO&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileWriter&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Resource's signature is Resource[+F[_], +A], containing 2 type parameters:
// an effect F (e.g. cats.effect.IO)
// and the resource type A
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// acquire the resource by providing an IO[A] which generates it
&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pizza.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// release the resource by providing an IO[Unit] which closes it
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Note that this block receives the resource as a parameter
&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This “double block” syntax can be unfamiliar at first, but it’s simply exploiting Scala’s &lt;a href=&quot;https://docs.scala-lang.org/tour/multiple-parameter-lists.html&quot;&gt;multiple parameter lists&lt;/a&gt; to accept the acquire and release args in sequence without wrapping parentheses.&lt;/p&gt;

&lt;p&gt;Once you’ve constructed a resource (or rather, defined the logic for constructing it, as the actual construction is deferred), you can access it via the &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pepperoni&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;integrating-resource-into-an-app&quot;&gt;Integrating Resource into an App&lt;/h2&gt;

&lt;p&gt;Note that the block provided to &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; also expects an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; (its signature is &lt;code class=&quot;highlighter-rouge&quot;&gt;(f: (A) =&amp;gt; G[B])&lt;/code&gt;) and yields an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO[B]&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt;’s machinery folds the effectful acquire/release operations into the rest of your program so the whole thing distills into a single &lt;code class=&quot;highlighter-rouge&quot;&gt;IO[Blah]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This works especially smoothly in contexts where you can put the resource-management on the “outside” of your program, such as in &lt;a href=&quot;https://typelevel.org/cats-effect/datatypes/ioapp.html&quot;&gt;IOApp&lt;/a&gt;. It’s very common to see &lt;code class=&quot;highlighter-rouge&quot;&gt;IOApp&lt;/code&gt; used along this pattern:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.effect._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ExitCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExitCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;resource-in-less-friendly-contexts&quot;&gt;Resource in less friendly contexts&lt;/h3&gt;

&lt;p&gt;However, sometimes we don’t have total control over the layering of a program, and instead have to fit a functional core, which may be heavily IO-based, into an imperative shell, which is not. This comes up commonly in scenarious such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test frameworks, which often use an imperative, stateful API for defining fixtures via a &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;teardown&lt;/code&gt; protocol.&lt;/li&gt;
  &lt;li&gt;Traditional hook-driven APIs, such as web frameworks that provide their own lifecycle methods. For example, I ran into this recently trying to integrate &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.Resource&lt;/code&gt; into the &lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/inject/ApplicationLifecycle.html#addStopHook(hook:()=%3Escala.concurrent.Future[_]):Unit&quot;&gt;ApplicationLifecycle&lt;/a&gt; of a Play application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, Resource does provide an escape hatch for these situations: &lt;a href=&quot;https://typelevel.org/cats-effect/api/cats/effect/Resource.html#allocated[G[x]%3E:F[x],B%3E:A](implicitF:cats.effect.BracketThrow[G]):G[(B,G[Unit])]&quot;&gt;Resource.allocated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource.allocated&lt;/code&gt; basically provides an unsafe method for “unnesting” the typical resource management flow. Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt;-ing your resource by providing an inner IO, you retrieve the value of it immediately, along with a callback which you are responsible for invoking to trigger the necessary release steps:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appResource&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this IO[Unit] is your deferred finalizer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appLauncher&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocated&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impLauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafeRunSync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Patch the provided finalizer into the application's shutdown lifecycle
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addStopHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafeToFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is certainly not the ideal way to use &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.Resource&lt;/code&gt;, but it’s a useful escape hatch to have when needed. As always, heed the warnings from the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For this reason, this is an advanced and potentially unsafe api which can cause a resource leak if not used correctly, please prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; as the standard way of running a Resource program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you do resort to manual use of &lt;code class=&quot;highlighter-rouge&quot;&gt;.allocated&lt;/code&gt;, just make sure you’re careful about cleaning up your resources at the appropriate time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Play! Nice</title>
   <link href="http://worace.works/2021/03/07/better-play-framework-request-pipelines-with-cats/"/>
   <updated>2021-03-07T00:00:00-08:00</updated>
   <id>http://worace.works/2021/03/07/better-play-framework-request-pipelines-with-cats</id>
   <content type="html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;TL;DR: Play is mostly pretty good but the built-in &lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/ScalaActionsComposition&quot;&gt;Action Composition&lt;/a&gt; helpers can be hard to use.&lt;/p&gt;

&lt;p&gt;Instead, roll your own, using cats-effect to model a web request pipeline:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.effect.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;play.api.mvc.Result&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add some extensions and helpers to integrate the new model with existing types:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Mixin for your Play controllers
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineHelpers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PipelineTypes._&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;play.api.mvc.ControllerComponents&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Provide this from your controller instances
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafeToFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Extension methods to adapt common types into pipelines
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineExtensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOOptionExts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// IO[Option[MyRecord]](None).orNotFound
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Handles the very common &quot;load this record from DB and give 404 if it's not there&quot;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orNotFound&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// IO[Option[MyRecord]](None).orRes(Redirect(&quot;/pizza&quot;))
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// pass any IO[A] through to a pipeline context by calling .piped
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// IO(&quot;some data&quot;).piped -&amp;gt; EitherT[IO, Result, String]
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOToPipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...add your own as needed
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use it in a controller for nice clean &lt;code class=&quot;highlighter-rouge&quot;&gt;for / yield&lt;/code&gt; request pipelines:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authed&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reusable auth pipeline: PipelineStage[User]
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;savedFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploadId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orNotFound&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Permission helper I have added -- gives PipelineStage[E] for the permitted entity
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permitted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloudStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signedDownloadUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Redirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;long-version&quot;&gt;Long Version&lt;/h2&gt;

&lt;p&gt;In the last few months I’ve been doing some work on a growing Play Framework project in Scala. Play seems to have fallen slightly in the hype cycle, but it’s pretty solid. As far as statically typed full-stack web dev goes it’s one of the better options available in any language.&lt;/p&gt;

&lt;p&gt;Here’s a super abbreviated list of some of the good parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solid implementation of MVC patterns&lt;/li&gt;
  &lt;li&gt;Built-in support for all the web handling goodies you need (sessions, CORS, CSRF, Forms, Flash, Response Formats, etc)&lt;/li&gt;
  &lt;li&gt;Statically typed routing + parameter handling – Seriously, if you forget a route or mis-match a parameter between your routes and your controller, your app won’t compile&lt;/li&gt;
  &lt;li&gt;Statically typed web templates – No more &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionView::TemplateError&lt;/code&gt; b/c you mis-named an instance variable in your template&lt;/li&gt;
  &lt;li&gt;Helpers and Plugins for common web tasks like asset digesting&lt;/li&gt;
  &lt;li&gt;Fast Enough (TM) for most use-cases, as long as you don’t get too sloppy blocking threads when you shouldn’t&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So all that stuff is great, and makes for a pretty productive dev experience. Especially given the recent “SPA Backlash” and resurgence of interest in traditional web apps with boring old server-side rendering (see e.g. &lt;a href=&quot;https://hotwire.dev/&quot;&gt;HotWire&lt;/a&gt;, &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html&quot;&gt;Phoenix LiveView&lt;/a&gt;, &lt;a href=&quot;https://whatisjasongoldstein.com/writing/help-none-of-my-projects-want-to-be-spas/&quot;&gt;Help! None of my projects want to be SPAs&lt;/a&gt;), maybe we’ll see some revived interest in Play. Who knows – maybe there could even be a Play variant of the HotWire/LiveView style of server-based dynamic rendering at some point.&lt;/p&gt;

&lt;p&gt;There are a couple smallish things that I don’t love: all the Guice and Java-style DI stuff is gross (I just don’t use it – passing args to methods is fine), and as always you have to be vigilant to keep the framework’s machinery from seeping into your domain model (use a separate sbt module for your core app vs. your web interface, a la &lt;a href=&quot;https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)&quot;&gt;Hexagonal Architecture&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But the biggest annoyance that IMHO keeps Play from being really great is a lack of ergonomics around customizing and chaining controller actions.&lt;/p&gt;

&lt;h2 id=&quot;action-composition-and-request-pipeline-abstraction-in-play&quot;&gt;Action Composition and Request Pipeline Abstraction in Play&lt;/h2&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Web applications take in an HTTP Request and, through a series of developer-defined steps, generate a corresponding HTTP Response.&lt;/p&gt;

&lt;p&gt;A pattern in many web frameworks is to provide some sort of abstraction for modeling this process as a pipeline of steps. Each step can either modify the working context and continue the pipeline (loading the current user is a classic example), or abort the pipeline by providing an HTTP response.&lt;/p&gt;

&lt;p&gt;The “abort and provide a response” path often represents an error state: for example a pipeline requiring an authenticated user might abort and redirect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/login&lt;/code&gt; path if there was none. This pattern can be applied outside the context of web programming as well – sometimes it’s called &lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway Oriented Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Different web frameworks have different approaches to modeling request pipelines. In Rails you have &lt;a href=&quot;https://guides.rubyonrails.org/action_controller_overview.html#filters&quot;&gt;filters&lt;/a&gt; which can modify request context by manipulating the current controller instance state. Elixir’s Phoenix has a well-developed API for defining &lt;a href=&quot;https://hexdocs.pm/phoenix/routing.html#pipelines&quot;&gt;pipelines&lt;/a&gt; consisting of &lt;a href=&quot;https://hexdocs.pm/phoenix/plug.html&quot;&gt;plugs&lt;/a&gt;. Django follows the Python pattern of using method &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/topics/http/decorators/&quot;&gt;decorators&lt;/a&gt; to wrap request handlers in re-usable pipeline logic. Http4s, another popular Scala web library, takes a heavily functional and type-driven approach by modeling &lt;a href=&quot;https://http4s.org/v0.18/middleware/&quot;&gt;middleware&lt;/a&gt; using &lt;a href=&quot;https://typelevel.org/cats/datatypes/kleisli.html&quot;&gt;Kleisli&lt;/a&gt; + &lt;a href=&quot;https://typelevel.org/cats/datatypes/optiont.html&quot;&gt;OptionT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reasons you’d want to use these pipeline-oriented abstractions range widely, but they’re extremely handy for keeping a web service codebase under control. Some examples of pipeline-ish things include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loading the current user&lt;/li&gt;
  &lt;li&gt;Requiring authentication&lt;/li&gt;
  &lt;li&gt;Checking permissions&lt;/li&gt;
  &lt;li&gt;DRY up resource-loading code by moving common DB lookups into pipeline stages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can of course just do all these things inline in your request handlers. But having a standard way to define and re-use them helps keep your handler implementations short and focused on what is specific to each particular route.&lt;/p&gt;

&lt;h3 id=&quot;plays-approach&quot;&gt;Play’s Approach&lt;/h3&gt;

&lt;p&gt;In Play, &lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/ScalaActions&quot;&gt;Action&lt;/a&gt; is the core abstraction representing the HTTP request/response lifecycle. An Action represents the transformation &lt;code class=&quot;highlighter-rouge&quot;&gt;play.api.mvc.Request =&amp;gt; play.api.mvc.Result&lt;/code&gt;, which makes sense.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Turning a Request into a Result!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more complicated things, like the various request Pipeline cases mentioned above, Play provides some additional types and helpers for dealing with &lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/ScalaActionsComposition&quot;&gt;Action Composition&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/ActionFilter.html&quot;&gt;ActionFilter&lt;/a&gt; - Pass the request through unmodified, or exit the pipeline early by providing a response&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/ActionRefiner.html&quot;&gt;ActionRefiner&lt;/a&gt; - Like ActionFilter, except that you can modify the Request type (e.g. to provide new context)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/ActionTransformer.html&quot;&gt;ActionTransformer&lt;/a&gt; - Transform one request to another (no chance for early exit)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/ActionBuilder.html&quot;&gt;ActionBuilder&lt;/a&gt; - Not really part of the filter/refine/transform Pipeline API per se, but gives some helpers for constructing Actions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/ActionFunction.html&quot;&gt;ActionFunction&lt;/a&gt; - Base type for all of the above – you generally won’t use it directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the descriptions and from reading examples in the docs, these all seem reasonable.&lt;/p&gt;

&lt;p&gt;But unfortunately, in my experience, they’re just absolutely &lt;strong&gt;maddening&lt;/strong&gt; to work with.&lt;/p&gt;

&lt;p&gt;It’s hard for me to accurately describe all of the various issues I’ve run into (I wish I had done a better job at saving the many compiler errors and use-cases I’ve failed to implement with these APIs), but I can say they were quite deterring. I may not be the most expert Scala user in the whole world, but I’m not bad, and my success rate in doing anything slightly non-trivial with Action handling in Play is about 1 in 6.&lt;/p&gt;

&lt;p&gt;I’m not sure I really understand all of the API design subtleties at play (ha!) with these features, but my hunch is that it comes down to some combination of these:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Action*&lt;/code&gt; APIs are all generic over the type of the incoming request body, as well as over the type of the Request being handled. For example in &lt;code class=&quot;highlighter-rouge&quot;&gt;trait ActionBuilder[+R[_], B]&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; represents an HTTP Body, for which you must provide a corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;BodyParser[B]&lt;/code&gt;, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;+R[_]&lt;/code&gt; represents a Request. The request has to be generic because you might have to swap it out for your own (more on that in a second). This may be a reasonable and correct way to model this stuff, but for inexperienced users it becomes unwieldy quickly.&lt;/li&gt;
  &lt;li&gt;These APIs are all inheritance (trait) based which means you have to interface with them via defining new classes of your own. This leads to a lot of boilerplate, and makes it hard to quickly spin up ad-hoc implementations as you go. Especially once you start wanting to introduce your own parameters (to allow call-site customization of the Actions you’re building), it gets really hard to keep your definitions inline with the inheritance interfaces required by the base traits.&lt;/li&gt;
  &lt;li&gt;As a statically typed framework, Play faces a challenge of what to do with new &lt;strong&gt;contextual data&lt;/strong&gt; during Request processing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even if you can master enough of the type hierarchy awareness required to confidently develop around points 1 and 2, point 3 turns out to be a pretty significant hurdle in providing a convenient developer API.&lt;/p&gt;

&lt;p&gt;Why is this such a problem for Play? Well, in dynamic language web frameworks, it’s common to stuff arbitrary data into the request context. For example in a Rails controller any object can be stashed as an instance variable at any point and thus retrieved via subsequent steps. Elixir’s Plug provides an &lt;a href=&quot;https://hexdocs.pm/plug/Plug.Conn.html#assign/3&quot;&gt;assigns&lt;/a&gt; field on its &lt;code class=&quot;highlighter-rouge&quot;&gt;Conn&lt;/code&gt; type for a similar purpose.&lt;/p&gt;

&lt;p&gt;Play provides a statically typed solution in the form of &lt;a href=&quot;https://www.playframework.com/documentation/2.8.x/api/scala/play/api/mvc/WrappedRequest.html&quot;&gt;WrappedRequest&lt;/a&gt;. For example it’s very common to see applications define a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRequest&lt;/code&gt; for tracking the authentication state of the request:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WrappedRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you’d define a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionBuilder&lt;/code&gt; which takes an existing request, fetches your user, and wraps it:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAction&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Some constructor boilerplate elided here...
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// mapping from a Request to a UserRequest
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;UserRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseRequest&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go get your user
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, makes sense I guess.&lt;/p&gt;

&lt;p&gt;But what if I need further composition? Maybe I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;WidgetController&lt;/code&gt; where I want to have a transformer to load a &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget&lt;/code&gt;. Well that could be an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionTransformer[UserRequest, WidgetRequest]&lt;/code&gt;. And maybe there’s also a nested route where widgets can also have &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt;s I want to load, so that would be &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionTransformer[WidgetRequest, OrderRequest]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So this is a little bit annoying, since I have to roll a new custom &lt;code class=&quot;highlighter-rouge&quot;&gt;WrappedRequest&lt;/code&gt; instance for each of these scenarios. But it’s at least tractable.&lt;/p&gt;

&lt;p&gt;However, what I if I also want to have an &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderRequest&lt;/code&gt; where I &lt;em&gt;didn’t&lt;/em&gt; load the widget first? Well, requiring concrete implementations for each variant of Request context I need to model forces me to spin up new definitions for every &lt;strong&gt;combination&lt;/strong&gt; of flow we’d need. It’s very challenging to do them ad-hoc.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UserRequest --&amp;gt; WidgetRequest --&amp;gt; WidgetOrderRequest
UserRequest --&amp;gt; UserOrderRequest
FooRequest --&amp;gt; FooOrderRequest ---&amp;gt; I can't just re-use my order-loading filter :(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; I’ve been loosely following how web tools in the Rust ecosystem solve this problem, since they face similar challenges. &lt;a href=&quot;https://rocket.rs/&quot;&gt;Rocket&lt;/a&gt; for example uses an interesting combination of &lt;a href=&quot;https://api.rocket.rs/v0.4/rocket/attr.get.html&quot;&gt;routing macros&lt;/a&gt; and &lt;a href=&quot;https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html&quot;&gt;typeclasses&lt;/a&gt;. I haven’t had a chance to dig into this but hope to explore it further.&lt;/p&gt;

&lt;h3 id=&quot;an-alternative-making-friends-with-cats&quot;&gt;An Alternative: Making Friends with Cats&lt;/h3&gt;

&lt;p&gt;After struggling with the Action API for a while I finally decided maybe things don’t actually have to be this complicated. The &lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway&lt;/a&gt; model really feels like the right thing here: I need a simple way to express the optionality of exiting early (with an HTTP response) or continuing the pipeline, potentially with additional new context.&lt;/p&gt;

&lt;p&gt;In dynamic langs, this is easy, because we can duck-type our way through it:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# elixir example in phoenix&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Framework checks for an early response between each stage&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# As long as you don't botch the return type from a stage too badly, you'll be ok&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:browser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:accepts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fetch_session&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fetch_flash&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:protect_from_forgery&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:put_secure_browser_headers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But in Scala we need to express it statically, and one way to do it is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Either&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each intermediate stage of a web request “pipeline” can either return an early Response, or continue with new info: &lt;code class=&quot;highlighter-rouge&quot;&gt;Either[play.api.mvc.Result, A]&lt;/code&gt;. For the final (non-intermediate) step of the pipeline, the righthand response must also be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&lt;/code&gt;, so you have &lt;code class=&quot;highlighter-rouge&quot;&gt;Either[play.api.mvc.Result, play.api.mvc.Result]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, there’s 1 more hiccup, which is that most web programming in Scala is going to be done async, with an effect type. In Play this is usually &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;, but in my own application I’m also using &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.IO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So my types actually end up as &lt;code class=&quot;highlighter-rouge&quot;&gt;IO[Either[play.api.mvc.Result, A]]&lt;/code&gt;. This nesting can be cumbersome, so I’ve brought in &lt;a href=&quot;https://typelevel.org/cats/datatypes/eithert.html&quot;&gt;EitherT&lt;/a&gt; from Cats to manage it.&lt;/p&gt;

&lt;p&gt;So…in my app I have some custom types like:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.effect.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;play.api.mvc.Result&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// As mentioned, I'm using cats.effect.IO here.
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// But you could also achieve the same with Future
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Or if you want to be really fancy make this tagless final to generalize to other effects
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I add a helper to my controller to provide an alternative to the default &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; builder:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineHelpers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PipelineTypes._&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;play.api.mvc.ControllerComponents&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Provide this from your controller instances
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// here is the &quot;end of the world&quot;, where the Cats Effects
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// get turned into side effects
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafeToFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now your controllers can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;, and skip the Play &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionBuilder&lt;/code&gt; machinery entirely.&lt;/p&gt;

&lt;p&gt;And, since it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt;…to chain pipeline stages you can just &lt;code class=&quot;highlighter-rouge&quot;&gt;for / yield&lt;/code&gt; like normal:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authed&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reusable auth pipeline: PipelineStage[User]
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;savedFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploadId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orNotFound&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Permission helper I have added -- gives PipelineStage[E] for the permitted entity
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permitted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloudStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signedDownloadUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Redirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;orNotFound&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;piped&lt;/code&gt;? I added these extensions in my controllers to adapt common datatypes into this pipeline model.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipelineExtensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOOptionExts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// IO[Option[MyRecord]](None).orNotFound
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Handles the very common &quot;load this record from DB and give 404 if it's not there&quot;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orNotFound&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// IO[Option[MyRecord]](None).orRes(Redirect(&quot;/pizza&quot;))
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// pass any IO[A] through to a pipeline context by calling .piped
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// IO(&quot;some data&quot;).piped -&amp;gt; EitherT[IO, Result, String]
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOToPipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PipelineStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EitherT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Over time I’ve accumulated maybe 50 lines or so of these helpers, but they’ve been quite stable. Compared to the hours lost fighting with the built-in play framework Action builders, this approach has been quite productive for me. And, maybe best of all, my controller code is &lt;em&gt;much&lt;/em&gt; cleaner.&lt;/p&gt;

&lt;p&gt;It’s very common in Play framework code to see big nested controller methods due to the complexities of handling effect types (&lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;) alongside the various error cases that can arise. But I just don’t have that anymore. Instead all my controller methods are nice linear stacks of &lt;code class=&quot;highlighter-rouge&quot;&gt;for { ... } yield { SomeResponse (...) }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To me, &lt;code class=&quot;highlighter-rouge&quot;&gt;for / yield&lt;/code&gt; (i.e. a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;s in a trenchcoat) is the natural way to handle this kind of railway chaining in Scala. It’s much nicer to compose these ad-hoc scopes on the fly rather than have to define a new concrete &lt;code class=&quot;highlighter-rouge&quot;&gt;WrappedRequest&lt;/code&gt; and a bunch of OOP boilerplate for each permutation of re-usable scope you might want to chain.&lt;/p&gt;

&lt;p&gt;I’ve also found the experience of using &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt; in this way to actually be pretty good. I was nervous about relying on it so heavily because I know it can give terrible compiler messages in some cases. But I haven’t had too many issues. My hunch is that it helps to have the whole pipeline wrapped in the outer &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; helper: &lt;code class=&quot;highlighter-rouge&quot;&gt;def Handler(h: (Request[AnyContent]) =&amp;gt; PipelineRes): Action[AnyContent]&lt;/code&gt;, which keeps the type inference constrained compared to an open-ended &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, that’s the gist of it. This may seem like a lot of fuss about a narrow slice of the application, but in my experience the handling of request pipelines is one of the most fundamental points of ergonomics for a web framework. How this is handled sets the groundwork for how clean and reusable your web-layer code can be.&lt;/p&gt;

&lt;p&gt;Doing it cleanly in a statically typed language like Scala isn’t trival, but the benefits are also great: I now have an API that approaches the convenience and conciseness of things like Rails but is also compiler-verified all the way from routing to templates.&lt;/p&gt;

&lt;h2 id=&quot;other-thoughts&quot;&gt;Other thoughts&lt;/h2&gt;

&lt;h3 id=&quot;how-does-this-compare-with-http4s-kleisli-setup&quot;&gt;How does this compare with http4s’ Kleisli setup?&lt;/h3&gt;

&lt;p&gt;Honestly I’m not sure and I’d like to understand it better. I have not used http4s much, and Kleisli has so far been a bridge too far in my own personal FP journey. Maybe I’ll get there evenutally but whenever I’ve looked at it I’ve found it too abstract. My hunch is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Kliesli&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;OptionT&lt;/code&gt; approach to middleware used in http4s is solving a similar problem, and may even be isomorphic to what I’m doing with these &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt; helpers. Maybe someone who knows FP better can explain this to me.&lt;/p&gt;

&lt;h3 id=&quot;what-about-zio&quot;&gt;What about ZIO?&lt;/h3&gt;

&lt;p&gt;I don’t really know. I haven’t tried to use it yet nor had a chance to research it thoroughly. I’m a touch put off by all the hype / marketing being poured on, but would like to take a look at some point.&lt;/p&gt;

&lt;p&gt;I’m not sure what the HTTP / Web Server situation is in ZIO but I could imagine some benefits from using the error channel to handle similar things to what I’m doing here (I know &lt;code class=&quot;highlighter-rouge&quot;&gt;ZIO&lt;/code&gt; is often billed as a nicer &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt; alternative). However I’ve been pretty happy with &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt; in this scenario so I don’t feel a ton of need to branch out. And I tend to manage the Dependency Injection aspects of my apps with plain old arg passing and object constructors, so I’m not sure I would get as much value from the Reader / Env channel. But I hope to have a chance to learn more about this at some point.&lt;/p&gt;

&lt;h3 id=&quot;what-about-eithert-overhead&quot;&gt;What about EitherT overhead?&lt;/h3&gt;

&lt;p&gt;I’ve seen occasional discussion about the overhead introduced by all the wrapping involved with monad transformers like &lt;code class=&quot;highlighter-rouge&quot;&gt;EitherT&lt;/code&gt; (oops I almost got through this whole post without saying the M-word). I’m sure there is some cost to this – you’re obviously allocating more objects and adding method calls to your code path. But most of my endpoints are doing at least 1 DB lookup already, if not many DB lookups, so it’s just hard for me to imagine this overhead adds up to anything significant in comparison.&lt;/p&gt;

&lt;p&gt;I have not taken the time to microbenchmark these aspects of the app, but I have certainly run load tests (via &lt;a href=&quot;https://github.com/gatling/gatling&quot;&gt;gatling&lt;/a&gt;) and the results there have been perfectly fine.&lt;/p&gt;

&lt;p&gt;Maybe my use-case is different – I’m deliberately doing “full stack” web work here, with lots of data lookups, etc, and I’m much more concerned with dev ergonomics and code cleanliness than I am with micro-optimizing a few milliseconds off of my endpoints. But as it is I’m confident that even on a modestly resourced server this setup will be humming along happily long after my database (which is the real bottleneck) has given up the ghost.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Transactional Sandbox Testing with Doobie</title>
   <link href="http://worace.works/2021/02/25/transactional-sandbox-testing-with-doobie/"/>
   <updated>2021-02-25T00:00:00-08:00</updated>
   <id>http://worace.works/2021/02/25/transactional-sandbox-testing-with-doobie</id>
   <content type="html">&lt;p&gt;Lately I’ve been working a lot with Rob Norris’ excellent &lt;a href=&quot;https://github.com/tpolecat/doobie&quot;&gt;doobie&lt;/a&gt; library for managing database queries in Scala. Here are a few notes on how I set up my test suite to cleanup state for tests that used the DB via doobie.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;This is one approach to isolating database-dependent tests so state from one test doesn’t bleed into the next. The idea is to wrap each test (and all of its database interactions) in a single top-level transaction which never commits. Then in your test teardown, you simply rollback the transaction which reverts the DB to its pristine state. This is the default testing setup in many full-stack web frameworks like Rails or &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Ecto.Adapters.SQL.Sandbox.html&quot;&gt;Phoenix&lt;/a&gt;, and while it can have some drawbacks in certain scenarios it’s overall a great experience.&lt;/p&gt;

&lt;p&gt;One benefit in particular is this allows your database-dependent tests in parallel, without having to manage a bunch of separate ad-hoc test DB instances (you just use a single shared, persistent test instance, which never actually gets any data written to it).&lt;/p&gt;

&lt;h2 id=&quot;transaction-based-tests-with-doobie&quot;&gt;Transaction-based Tests with Doobie&lt;/h2&gt;

&lt;p&gt;Doobie does provide an API (&lt;a href=&quot;https://javadoc.io/doc/org.tpolecat/doobie-core_2.12/latest/doobie/util/transactor$$Transactor$.html&quot;&gt;Transactor.after.set&lt;/a&gt;) for disabling the default “commit after transact” behavior temporarily. However I found this to be a little finicky, especially if I had tests that involved multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;ConnectionIO&lt;/code&gt;s which might get committed separately. There’s &lt;a href=&quot;https://github.com/tpolecat/doobie/issues/535#issuecomment-311202214&quot;&gt;a bit of discussion in this issue&lt;/a&gt;, but in my case I wanted to be able to run a “full slice” of my application, which might involve many different &lt;code class=&quot;highlighter-rouge&quot;&gt;ConnectionIO&lt;/code&gt;s as well as some invocations of my application-level effect, which in this case is &lt;code class=&quot;highlighter-rouge&quot;&gt;cats.effect.IO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So I wired up a base &lt;code class=&quot;highlighter-rouge&quot;&gt;SandboxTest&lt;/code&gt; which provides this functionality by manipulating a setting on a JDBC connection before passing it off to doobie. Note that I’m also using &lt;a href=&quot;https://github.com/typelevel/munit-cats-effect&quot;&gt;munit-cats-effect&lt;/a&gt; here which allows tests to return &lt;code class=&quot;highlighter-rouge&quot;&gt;IO[Assertion]&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Base test for providing non-commiting Transactor[IO] as an munit Fixture
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SandboxTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;munit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CatsEffectSuite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// set up a connection pool to your test DB like normal
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HikariDataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// munit Suite-level fixtures for holding the connection pool
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// this happens once for each test class
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HikariDataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Context to provide into the individual tests as a scenario
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// This can be expanded to include an instance of your application,
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// some custom fixture instances, or whatever else you need to support your test examples
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Note the connection itself must be passed through so it's available in teardown
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Transactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Prevent the connection from committing early on your behalf
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Make a transactor wrapping this single connection instance, rather than the whole pool
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Blocker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liftExecutionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doobie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExecutionContexts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackXa&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Transactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Disable Doobie's default commit behavior
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackXa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// After the test, rollback and close the connection
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// This cleans up any changes you made to the DB during your test
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now each test class that uses this base can use its fixture to get a wrapped doobie transactor:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionalExampleTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SandboxTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactional test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Transactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// these queries will actually run against your database and yield real results
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// but any changes they make will be cleaned up at the end of the test
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;insert into foods (name) values ('pizza')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select name from foods&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pizza&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For brevity I’ve omitted the imports from these snippets but you can see the fully worked example in this &lt;a href=&quot;https://github.com/worace/doobie-transactional-tests&quot;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-approaches&quot;&gt;Other Approaches&lt;/h2&gt;

&lt;h3 id=&quot;explicit-truncation&quot;&gt;Explicit Truncation&lt;/h3&gt;

&lt;p&gt;You can of course handle the db state problem manually, by explicitly re-setting the state of your db between each example. This could be done either by truncating all of your tables 1 by 1, or dropping the whole schema and re-migrating it.&lt;/p&gt;

&lt;p&gt;This isn’t the worst, but dropping and re-creating schemas can be slow, and truncating often requires you to keep your test truncation code up to date as you evolve your schema. And perhaps the biggest issue is this strategy limits your ability to run db-reliant tests in parallel, since they aren’t isolated from one another in a transaction.&lt;/p&gt;

&lt;h3 id=&quot;temp-or-in-memory-db-eg-h2-or-sqlite&quot;&gt;Temp or In-Memory DB (e.g. H2 or SQLite)&lt;/h3&gt;

&lt;p&gt;You can also use a temporary (often in-memory) DB for your tests. SQLite and the pure-Java H2 database are popular choices for this, as they can be run locally as libraries (don’t have to shell out to manage them) and have an in-memory mode that discards data at the end of your test runs.&lt;/p&gt;

&lt;p&gt;These DBs are fast and cheap to create, so you can afford to spin up an entirely new DB for every single test run, which gives great isolation between tests while still keeping things pretty fast.&lt;/p&gt;

&lt;p&gt;However unless you’re actually running SQLite or H2 in production, you’ll be using a different DB between your test and prod environments. Which at best is kind of sketchy, because you’ll likely paper over problems that won’t reveal themselves until you deploy to prod.&lt;/p&gt;

&lt;p&gt;But more likely it’s just not viable, because you’re probably leveraging DB-specific features (PostGIS, anyone?) which won’t exist in something like H2 or SQLite.&lt;/p&gt;

&lt;p&gt;Several years ago there seemed to be a trend toward treating SQL DBs as interchangeable boxes that your ORM’s SQL interface (AcitveRecord, Hibernate, etc) would paper over as needed.&lt;/p&gt;

&lt;p&gt;But nowadays we’re more happy to rely on our DBs as processing tools and not just generic relational stores. Which is great IMO – Postgres in particular is super powerful and we should leverage it – but it means you probably don’t want to try to use something different for testing.&lt;/p&gt;

&lt;h3 id=&quot;testcontainers&quot;&gt;TestContainers&lt;/h3&gt;

&lt;p&gt;Another approach that has been gaining a lot of popularity is using Docker containers to run dedicated test db instances. This lets you get a real Postgres or MySQL instance that can still be easily thrown away so you don’t deal with tainted state between tests.&lt;/p&gt;

&lt;p&gt;And in recent years the &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;TestContainers&lt;/a&gt; project has made this strategy much easier by providing high quality library bindings for programmatically manipulating containers, so you can integrate the container lifecycle with your test framework without relying external tools like docker-compose.&lt;/p&gt;

&lt;p&gt;There’s also a great library for integrating it with popular Scala test frameworks like Scalatest and Munit: &lt;a href=&quot;https://github.com/testcontainers/testcontainers-scala&quot;&gt;testcontainers-scala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of what it looks like in munit:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.dimafeng.testcontainers.PostgreSQLContainer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.dimafeng.testcontainers.munit.TestContainerForEach&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestContainersExampleTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;munit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FunSuite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestContainerForEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerDef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostgreSQLContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Def&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test postgres with testcontainer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;withContainers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postgresContainer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do stuff with postgres
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So overall this is pretty nice, and it can be configured in a lot of different ways. You can achieve various configurations like 1 container per test, 1 per suite, a mix of multiple containers at once, etc.&lt;/p&gt;

&lt;p&gt;However the biggest downside IMHO is that it can be pretty slow. Especially if you want to rely on containers for providing state isolation, you’ll need a fresh one for each test, which can take sevral seconds. You also have to apply schema migrations to those fresh containers to get them ready to use.&lt;/p&gt;

&lt;p&gt;Here’s a gif showing a comparison from the example repo linked above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/transactional_vs_testcontainers.gif&quot; alt=&quot;TestContainers vs. Transactional Tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The DB interactions in these tests are admittedly pretty simplistic, but as you can see that’s running 100 transaction/rollback tests (which actually insert and read data) before the first test container can even get booted.&lt;/p&gt;

&lt;p&gt;I think a lot of people that use this approach rely on it for a relatively small number of integration tests where you’re extensively exercising the system in a few complex scenarios. Then they rely on a mix of IO-less unit tests and/or mocking to test the rest of the system without the DB at all. So if that fits the profile of your application, it’s probably a good way to go.&lt;/p&gt;

&lt;p&gt;Unfortunately in many of the applications I work on, the RDBMS is a significant part of the application logic, so most of the things that would be meaningful for me to test need to rely on it. So in these cases its more beneficial to me to have fast transactional tests than more isolated container-based tests. But as always YMMV.&lt;/p&gt;

&lt;p&gt;And of course there are some cases where the transaction/rollback approach doesn’t work well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your application actually needs to do tricky stuff of its own with transaction boundaries, so having them managed by the test suite is problematic&lt;/li&gt;
  &lt;li&gt;You need an external process to see the results of your db operations, in which case transaction isolation won’t work. This is common when running something like a browser-driven acceptance test, where an external process like selenium needs to connect to a live instance of your app and drive it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in these cases its great to have the TestContainers approach to fall back on.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sangria Scalar for ISO 8601 Dates</title>
   <link href="http://worace.works/2020/05/08/iso8601-date-as-sangria-scalar/"/>
   <updated>2020-05-08T00:00:00-07:00</updated>
   <id>http://worace.works/2020/05/08/iso8601-date-as-sangria-scalar</id>
   <content type="html">&lt;p&gt;Today I had to figure out how to encode a &lt;code&gt;java.util.Date&lt;/code&gt; as a GraphQL Scalar using &lt;a href=&quot;https://sangria-graphql.org/&quot;&gt;Sangria&lt;/a&gt;. &lt;a href=&quot;https://graphql.org/learn/schema/#scalar-types&quot;&gt;Scalars&lt;/a&gt; in GraphQL are basically fancy strings that let you encode custom data types. This one reads and writes a &lt;code&gt;java.util.Date&lt;/code&gt; as an &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;-formatted string, which looks like &amp;#8220;2020-05-09T03:20:28Z.&amp;#8221; If your dates are not in UTC you may have a bad time, so don&amp;#8217;t do that.&lt;/p&gt;
&lt;p&gt;Here it is!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.util.Try&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.format.DateTimeFormatter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.Instant&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sangria.validation.ValueCoercionViolation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sangria.schema._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sangria.ast._&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Helper object for doing the decoding. I put this in a utils package&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISO8601&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toZoneId&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ISO_INSTANT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporalAccessor&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temporalAccessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localDateTime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInstant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLocalDateTime&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scalars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ValueCoercionViolation&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ISO8601&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidDateTimeViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidDateTimeViolation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueCoercionViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Input is not valid Date.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The actual Scalar definition. Import this implicit when defining your schema&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to be enable Sangria to infer schemas for case classes that have Date memebers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScalarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coerceOutput&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISO8601&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coerceInput&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidDateTimeViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coerceUserInput&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidDateTimeViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Random Point in Radius with Spatial4J</title>
   <link href="http://worace.works/2019/08/22/random-point-in-radius-with-spatial4j/"/>
   <updated>2019-08-22T00:00:00-07:00</updated>
   <id>http://worace.works/2019/08/22/random-point-in-radius-with-spatial4j</id>
   <content type="html">&lt;p&gt;Recently I needed to generate random points within a given radius around a point on a map.&lt;/p&gt;
&lt;p&gt;I found it less obvious than I expected, so I decided to document the process here in case it helps anyone.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using &lt;a href=&quot;https://github.com/locationtech/spatial4j&quot;&gt;Spatial4J&lt;/a&gt;, a Java geospatial library which provides utilities for doing spatial operations in a geodesic context. In particular this contrasts with the also-popular &lt;a href=&quot;https://github.com/locationtech/jts&quot;&gt;Java Topology Suite&lt;/a&gt;, which provides vector-oriented geometric utilities in a Cartesian context.&lt;/p&gt;
&lt;p&gt;For mapping work where you care about normal surface-of-the-earth distance units like feet or meters, Spatial4J is often the tool you need. That said, if you&amp;#8217;re not working on the JVM, other great tools like &lt;a href=&quot;https://pypi.org/project/Shapely/&quot;&gt;Shapely (Python)&lt;/a&gt; and &lt;a href=&quot;https://github.com/rgeo/rgeo&quot;&gt;RGeo (Ruby)&lt;/a&gt; provide similar utilities for other languages.&lt;/p&gt;
&lt;h2&gt;Deps / Repl setup&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m going to show some code snippets in scala which can be used interactively in the scala REPL.&lt;/p&gt;
&lt;p&gt;For a real project, you&amp;#8217;ll obviously want to put this into a pom/sbt/lein/whatever config file, but for quick experimentation, you can download the Spatial4J JAR from &lt;a href=&quot;https://mvnrepository.com/artifact/org.locationtech.spatial4j/spatial4j/0.7&quot;&gt;maven&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://repo1.maven.org/maven2/org/locationtech/spatial4j/spatial4j/0.7/spatial4j-0.7.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in a scala repl, require it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➸ scala
Welcome to Scala 2.12.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_121).
Type in expressions for evaluation. Or try :help.

scala&amp;gt; :require spatial4j-0.7.jar
Added &amp;#39;/private/tmp/spatial4j-0.7.jar&amp;#39; to classpath.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you&amp;#8217;ll be able to import and work with Spatial4J&amp;#8217;s classes in your REPL session.&lt;/p&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;p&gt;We want to provide a center point (as a latitude and longitude) and a radius and get back a random point within the implied circle.&lt;/p&gt;
&lt;p&gt;Here are the rough steps we&amp;#8217;ll follow:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set up some imports&lt;/li&gt;
  &lt;li&gt;Construct some basic spatial4j factory objects (it doesn&amp;#8217;t have &amp;#8220;4J&amp;#8221; in the name for nothing)&lt;/li&gt;
  &lt;li&gt;Make an s4j point representing our desired center lat/lon&lt;/li&gt;
  &lt;li&gt;Pick a random distance offset within the desired radius&lt;/li&gt;
  &lt;li&gt;Pick a random bearing (0 - 360 degrees) to shift our point&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Convert our distance (in meters) to an appropriate offset (in /degrees/) at the target lat/lon.&lt;/b&gt; We&amp;#8217;ll get to this in a minute, but it turns out this has to be done in polar units like degrees rather than cartesian units like meters. Spatial4J provides a lot of utility here.&lt;/li&gt;
  &lt;li&gt;Victory! Get back our new random point.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Imports&lt;/h2&gt;
&lt;p&gt;First, set up some imports:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.context.SpatialContext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.distance.DistanceUtils&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Factory Stuff&lt;/h2&gt;
&lt;p&gt;Spatial4J uses a Factory object called a &lt;a href=&quot;https://locationtech.github.io/spatial4j/apidocs/org/locationtech/spatial4j/context/SpatialContext.html&quot;&gt;SpatialContext&lt;/a&gt; for many of its core APIs. There are a lot of different ways to configure this depending on your needs, but for the most common use-cases they include a static implementation under &lt;code&gt;SpatialContext.GEO&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationtech&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spatial4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpatialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GEO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Make a point object to represent the desired lat/lon&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ll use another factory off of our &lt;code&gt;SpatialContext&lt;/code&gt; to construct this. Remember in Geospatial tech longitude is X and latitude is Y:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;33.94&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.41&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Pick a random distance offset&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Pick a random bearing&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Convert the linear distance offset to angular units (degrees)&lt;/h2&gt;
&lt;p&gt;This is the kicker for working with geodesic libraries like Spatial4J. It operates in a polar context, dealing with radii and angles (lat/lon) from the earth, but a distance like 500 meters is cartesian, dealing with flat distances on the earth&amp;#8217;s surface.&lt;/p&gt;
&lt;p&gt;Fortunately there are ways to convert between the 2. In particular Spatial4J&amp;#8217;s &lt;a href=&quot;https://locationtech.github.io/spatial4j/apidocs/org/locationtech/spatial4j/distance/DistanceUtils.html&quot;&gt;DistanceUtils&lt;/a&gt; module includes some constants and utilities for this purpose:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EARTH_MEAN_RADIUS_KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist2Degrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might notice we are using Earth&amp;#8217;s &amp;#8220;mean radius&amp;#8221; here. Depending on the level of precision required by your application, there are more sophisticated ways to make this conversion more accurate. For example the earth isn&amp;#8217;t truly spherical but rather slightly oval-shaped, and algorithms exist to find a more precise radius at a given latitude rather than simply taking the mean. In keeping with blog post tradition, we&amp;#8217;ll leave researching this as an exercise for the reader.&lt;/p&gt;
&lt;h2&gt;Get a new point&lt;/h2&gt;
&lt;p&gt;We now have a starting point, a bearing, and an offset radius in degrees.&lt;/p&gt;
&lt;p&gt;Finally we can use another Spatial4J utility, &lt;code&gt;org.locationtech.spatial4j.distance.GeodesicSphereDistCalc&lt;/code&gt;, to convert our start point, bearing, and offset to a new point.&lt;/p&gt;
&lt;p&gt;Note that this uses a very Java-ish API, where you first construct the Point object yourself using a placeholder lat/lon and then pass it in to be modified by the Distance Calculator.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.distance.GeodesicSphereDistCalc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeodesicSphereDistCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vincenty&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointOnBearing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Pt(x=-118.00099201867381,y=33.9950199965435)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;All together&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#8217;ve seen the pieces, we can assemble them into a nice utility function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.context.SpatialContext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.distance.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeodesicSphereDistCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationtech&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spatial4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpatialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GEO&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeodesicSphereDistCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vincenty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EARTH_MEAN_RADIUS_KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist2Degrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointOnBearing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.00141054557675&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.9971987911845&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;117.99966381772931&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.997181705450046&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0008673083813&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.99933155556646&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;117.99862804930764&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.001770697901655&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;A catch regarding distributions&lt;/h2&gt;
&lt;p&gt;This works great, but if we take a large sample and plot it on a map, we&amp;#8217;ll notice the points cluster tightly near the center:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.94&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.93769610837791,-118.39618482618667&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.944086950586815,-118.41270519841264&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.938436141001375,-118.41187357399744&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.93224346396654,-118.39866113148551&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etc&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Copy + paste | geoq map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/point_in_radius_clustered.png&quot; alt=&quot;/public/images/point_in_radius_clustered.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It turns out that because of the way circles and area work, taking a random distance offset within our desired radius doesn&amp;#8217;t give a uniform distribution throughout the circle, but rather clusters the points toward the center.&lt;/p&gt;
&lt;p&gt;If we want a smooth distribution over the area described by our point and radius, we&amp;#8217;ll need to sample radii exponentially weighted toward the max radius. That is, we want:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could even give our users an option to toggle between these choices when using the function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.context.SpatialContext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.distance.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeodesicSphereDistCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.locationtech.spatial4j.shape.Point&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.util.Random&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.math&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationtech&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spatial4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpatialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GEO&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeodesicSphereDistCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vincenty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EARTH_MEAN_RADIUS_KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evenDistribution&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evenDistribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DistanceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist2Degrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsetMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earthRadiusMeters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getShapeFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointOnBearing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bearingDegrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sampling from this distribution gives us the smooth coverage we might have expected:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randPointInRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.939640262698276,-118.43135364227057&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.946446329758274,-118.4285590217258&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.927846243486826,-118.40795788351743&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.922739829504145,-118.41091483844558&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.93132724358199,-118.41135336156653&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.941905760094876,-118.42909622711291&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 33.939879012731645,-118.39112410484391&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etc...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/point_in_radius_uniform.png&quot; alt=&quot;/public/images/point_in_radius_uniform.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s it! A utility like this is helpful for applications like generating heatmaps, so hopefully it will be useful to you:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/point_in_radius_heatmap.png&quot; alt=&quot;/public/images/point_in_radius_heatmap.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, if you happen to be working in clojure, the great &lt;a href=&quot;https://github.com/factual/geo&quot;&gt;Factual/geo&lt;/a&gt; library includes a utility exactly like this: &lt;a href=&quot;http://factual.github.io/geo/2.1.1/geo.spatial.html#var-rand-point-in-radius&quot;&gt;geo.spatial/rand-point-in-radius&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Schema Migrations for Data Projects</title>
   <link href="http://worace.works/2019/08/16/schema-migrations-for-data-projects/"/>
   <updated>2019-08-16T00:00:00-07:00</updated>
   <id>http://worace.works/2019/08/16/schema-migrations-for-data-projects</id>
   <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Database migrations are a tool for managing the evolution of a database schema in an automated and centralized way.&lt;/p&gt;
&lt;p&gt;Without a migration tool, you might perform schema updates on your database by manually running SQL commands.&lt;/p&gt;
&lt;p&gt;For example imagine you want to create a database to track your favorite pizza toppings. You could create the DB manually from the command line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;CREATE DATABASE pizza_toppings;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you could run another command to add a table:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d pizza_toppings -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;CREATE TABLE toppings (name text not null, ranking integer);&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But maybe you realize a simple number isn&amp;#8217;t sufficient to express your topping rankings, so you update the table to use an enum (in this case taking advantage of a specific feature in postgresql):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d pizza_toppings -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;CREATE TYPE topping_attitude AS ENUM (&amp;#39;like&amp;#39;, &amp;#39;dont_like&amp;#39;);&amp;quot;&lt;/span&gt;
psql -d pizza_toppings -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ALTER TABLE toppings DROP COLUMN ranking;&amp;quot;&lt;/span&gt;
psql -d pizza_toppings -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ALTER TABLE toppings ADD COLUMN attitude topping_attitude;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can connect to the database and see that the schema ends up like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pizza_toppings=# \d toppings
                   Table &amp;quot;public.toppings&amp;quot;
  Column  |       Type       | Collation | Nullable | Default
----------+------------------+-----------+----------+---------
 name     | text             |           | not null |
 attitude | topping_attitude |           |          |
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Manual Migration Problems&lt;/h2&gt;
&lt;p&gt;This can work well enough, especially for small projects or quick experiments. However it brings several problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Without talking to the engineer who configured the DB (or perhaps consulting a soon-to-be-outdated README) we have no way of knowing how things got to this state.&lt;/li&gt;
  &lt;li&gt;Manually entering commands is error prone. It&amp;#8217;s hard to remember the right SQL syntax for various operations, and it&amp;#8217;s easy to forget certain less-visible DB effects like adding indices or NULL constraints.&lt;/li&gt;
  &lt;li&gt;We will eventually need to re-run the process for other environments, for example to create a separate copy of the database for testing or production, and these processes will have to be excecuted manually from memory or documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;You&amp;#8217;re not off the hook just because your DB is &amp;#8220;internal&amp;#8221;&lt;/h2&gt;
&lt;p&gt;This type of on-the-fly DB configuration is especially common in data engineering and analysis projects. Developers working on online production systems may be more accustomed to the need to automate and standardize their DB configuration, but when working on analytics DBs that will mostly be used by other internal engineers, we may be more likely to give ourselves a pass.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t do this.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s no such thing as a &amp;#8220;one time&amp;#8221; setup process in modern data engineering. You &lt;i&gt;will&lt;/i&gt; need to re-do this process sooner or later (hopefully sooner, since you&amp;#8217;ll want another copy of the database for running all those automated tests you are writing, right?) And in that case, you&amp;#8217;ll be happy to have some automation around it.&lt;/p&gt;
&lt;h2&gt;Proper Tools&lt;/h2&gt;
&lt;p&gt;So what can we do instead? The tool we&amp;#8217;re looking for is called a &amp;#8220;Database Migration&amp;#8221; or &amp;#8220;Schema Migration&amp;#8221;. Perhaps confusingly Database Migrations don&amp;#8217;t involve moving your DB between locations (for example migrating from one service provider to another). Rather the term refers to migrating the configuration of the database from one state to another. (Some tools also call this a database &amp;#8220;evolution.&amp;#8221;)&lt;/p&gt;
&lt;p&gt;In practice, this comes up most often in the context of relational (e.g. SQL) databases, since these systems enforce pre-defined schemas which must be explicitly upated in order to change the structure of your data. Adding or removing tables, updating indices, or modifying null constraints are all examples of things we might do with a migration tool.&lt;/p&gt;
&lt;h2&gt;Schema Migration Benefits&lt;/h2&gt;
&lt;p&gt;Schema Migrations make the process of modifying your database&amp;#8217;s schema predictable, repeatable, and manageable. By managing schema evolution with an automated tool rather than manual commands, we gain some important benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Repeatability: You&amp;#8217;ll be able to re-run the process reliably on different databases and different environments.&lt;/li&gt;
  &lt;li&gt;Version Control: By treating your migration scripts as code artifacts, you&amp;#8217;re able to commit them into a repository along with the rest of your code. This helps with reviewing and communicating about potential changes.&lt;/li&gt;
  &lt;li&gt;Documentation: Similar to the previous point, your project&amp;#8217;s migrations document how the database got to its current state and help new developers understand the history of the project.&lt;/li&gt;
  &lt;li&gt;Operability: Using a dedicated tool to run schema migrations helps you integrate the process into automated deployment pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Essence of A DB Migration Tool&lt;/h2&gt;
&lt;p&gt;At its core, a migration tool contains a few parts:&lt;/p&gt;
&lt;h4&gt;1. Migration scripts describing schema changes&lt;/h4&gt;
&lt;p&gt;Depending on the tool these could be written explicitly as SQL commands, or specified using a language-specific DSL. Most tools version migration scripts in some way, such as prepending an incrementing counter (&lt;code&gt;001&lt;/code&gt;, &lt;code&gt;002&lt;/code&gt;, etc) or a timestamp (&lt;code&gt;20190101&lt;/code&gt;) to the migration files.&lt;/p&gt;
&lt;h4&gt;2. Version-tracking mechanism&lt;/h4&gt;
&lt;p&gt;If we have a series of migrations &lt;code&gt;001_create_users.sql&lt;/code&gt;, &lt;code&gt;002_create_items.sql&lt;/code&gt;, &lt;code&gt;003_create_orders.sql&lt;/code&gt;, we need to know which version we&amp;#8217;re currently on so we can decide which ones remain to be run. Many tools create a dedicated table like &lt;code&gt;schema_migrations&lt;/code&gt; or &lt;code&gt;schema_version&lt;/code&gt; in your database for storing this information. It may go without saying, but you should allow your migration tool to manage this table and avoid editing it manually.&lt;/p&gt;
&lt;h2&gt;Migration Workflow&lt;/h2&gt;
&lt;p&gt;With these pieces in mind, a common migration workflow might look like this:&lt;/p&gt;
&lt;h4&gt;1. Create a new migration file&lt;/h4&gt;
&lt;p&gt;To start a DB for a new e-commerce web application, we might create a migration file like &lt;code&gt;001_create_users.sql&lt;/code&gt; and populate it with a bit of SQL:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2. Run the migration&lt;/h4&gt;
&lt;p&gt;At its most primitive, we could do this manually with a combination of running the sql script:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d our_database -f 001_create_users.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And inserting the version to our migrations table:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d our_databse -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;INSERT INTO schema_migrations (version) (&amp;#39;001_create_users&amp;#39;);&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However these steps will generally be handled by a migration tool for us, so often all we have to do is run some command like &lt;code&gt;cool_migrator migrate up&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Bells and Whistles&lt;/h2&gt;
&lt;p&gt;On top of this basic functionality, some migration tools include various additional features such as:&lt;/p&gt;
&lt;h4&gt;Rollbacks&lt;/h4&gt;
&lt;p&gt;Some tools give you a way to define a &amp;#8220;backwards&amp;#8221; or &amp;#8220;down&amp;#8221; migration alongside each forward one. For example you might have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- 001_create_users.sql&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- up:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- down:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives you the ability to revert a migration if you decided there was a problem or you decided you need to change something.&lt;/p&gt;
&lt;p&gt;Some tools can even infer this for you automatically. For example the ActiveRecord migrator included with Ruby on Rails can automatically reverse common operations like create table statements.&lt;/p&gt;
&lt;p&gt;However keep a few things in mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It&amp;#8217;s up to you to ensure that your &amp;#8220;down&amp;#8221; step is a proper inverse of your &amp;#8220;up.&amp;#8221; If you rely on this functionality in production, it can be a good idea to test it in development to ensure that you have the schema operations correct.&lt;/li&gt;
  &lt;li&gt;Schema migrations generally operate as a Stack. So if you have migrated versions &lt;code&gt;001&lt;/code&gt;, &lt;code&gt;002&lt;/code&gt;, and &lt;code&gt;003&lt;/code&gt;, and decide you need to make a change to &lt;code&gt;001&lt;/code&gt;. You&amp;#8217;ll need to revert &lt;code&gt;003&lt;/code&gt; and &lt;code&gt;002&lt;/code&gt; in order to get back to &lt;code&gt;001&lt;/code&gt;. At this point, it may be easier to just make a new version, &lt;code&gt;004&lt;/code&gt;, which performs whatever modifications you need.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Column Helpers&lt;/h4&gt;
&lt;p&gt;Some tools include built-in helpers for performing common schema modification tasks, like adding inserted and modified timestamps to a table, or configuring primary keys. This is especially common with DSL-based tools like ActiveRecord, Django, or Ecto migrations. This can be surprisingly helpful in enforcing common standards, so that you don&amp;#8217;t end up using different timestamp implementations on different tables in your application.&lt;/p&gt;
&lt;h4&gt;Script Fingerprinting&lt;/h4&gt;
&lt;p&gt;Some tools record a hash (such as an MD5) of a migration script&amp;#8217;s contents when it is run. This can help you prevent a conflict if you accidentally modified the file and tried to run it again;&lt;/p&gt;
&lt;h4&gt;Script Generation&lt;/h4&gt;
&lt;p&gt;Many tools include command-line helpers for generating new migration files with the proper naming conventions (like versioning) and some of the common boilerplate filled in.&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;A common theme among schema migration tools is that connection configuration is specified separately from the code that defines your actual migration operations. Different tools have different techniques for this &amp;#8211; it could be a &lt;code&gt;DATABASE_URL&lt;/code&gt; system var (like many &lt;a href=&quot;https://12factor.net/&quot;&gt;Twelve-Factor&lt;/a&gt; apps use), or some combination of a JSON or YAML file and a command-line flag.&lt;/p&gt;
&lt;p&gt;The important part is that this configurability allows you to run migrations independently and repeatably across many environments. You might have 2 copies of the db on each developers local machine (one for testing and one for development), one for staging, and one for production, and they can all be reliably kept in sync.&lt;/p&gt;
&lt;h2&gt;Migration Tooling Lay of the Land&lt;/h2&gt;
&lt;p&gt;Ok, enough background, how do we get one? There are a lot of tools out there, here is an incomplete listing of them.&lt;/p&gt;
&lt;h3&gt;ORM-Bundled Solutions&lt;/h3&gt;
&lt;p&gt;Many full-featured ORM libraries include their own implementation of a Schema Migrator.&lt;/p&gt;
&lt;p&gt;Perhaps the most famous is &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_record_migrations.html&quot;&gt;ActiveRecord&lt;/a&gt;, the ORM (and migration tool) that ships with Ruby on Rails. ActiveRecord in particular popularized some of the quality-of-life features we have come to expect from these tools, like having a clean DSL (using Ruby in this case) for defining migrations, and including CLI commands for common operations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.2/topics/migrations/&quot;&gt;Django&lt;/a&gt; similarly includes a bundled migration solution along with its ORM. Django&amp;#8217;s implementation includes an interesting feature which can &lt;a href=&quot;https://docs.djangoproject.com/en/2.2/topics/migrations/#workflow&quot;&gt;infer&lt;/a&gt; necessary migrations by looking at changes in your model definitions:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Working with migrations is simple. Make changes to your models - say, add a field and remove a model - and then run makemigrations:&lt;/p&gt;
  &lt;p&gt;[&amp;#8230;]&lt;/p&gt;
  &lt;p&gt;Your models will be scanned and compared to the versions currently contained in your migration files, and then a new set of migrations will be written out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The list goes on: &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Ecto.Migration.html&quot;&gt;Ecto&lt;/a&gt; (Elixir), &lt;a href=&quot;https://laravel.com/docs/5.8/migrations&quot;&gt;Laravel&lt;/a&gt; (PHP), &lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/&quot;&gt;Entity Framework&lt;/a&gt; (.NET / C#), and &lt;a href=&quot;https://www.playframework.com/documentation/2.7.x/Evolutions&quot;&gt;Play&lt;/a&gt; (Scala/Java) all include their own solutions. So if you&amp;#8217;re using an ORM or a full-stack web framework, check to see if it includes built-in migration support.&lt;/p&gt;
&lt;h3&gt;Standalone Tools&lt;/h3&gt;
&lt;p&gt;However, you may not be using one of these larger tools, so it&amp;#8217;s nice to have standalone (and potentially smaller or more lightweight) options. There are plenty of these as well. Here are a few:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt; is a popular choice in the JVM ecosystem. It operates separately from any ORM or runtime database library, and has integrations with popular JVM build tools like Maven, Gradle, or SBT. This seems to be a popular option for people using Java-based persistence libraries like Hibernate or Spring.&lt;/li&gt;
  &lt;li&gt;In node.js, as is often the case, you have as many options as you are willing to spend time researching. &lt;a href=&quot;https://github.com/db-migrate/node-db-migrate&quot;&gt;node-db-migrate&lt;/a&gt;, &lt;a href=&quot;https://github.com/salsita/node-pg-migrate&quot;&gt;node-pg-migrate&lt;/a&gt;, and &lt;a href=&quot;https://sequelize.readthedocs.io/en/latest/docs/migrations/&quot;&gt;sequelize&lt;/a&gt; all seem like popular solutions (sequelize being included with a popular ORM framework as well).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeremyevans/sequel/blob/master/doc/migration.rdoc&quot;&gt;Ruby&amp;#8217;s Sequel&lt;/a&gt; and Python&amp;#8217;s &lt;a href=&quot;https://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt; (in the form of &lt;a href=&quot;https://pypi.org/project/alembic/&quot;&gt;Alembic&lt;/a&gt;), both include migration options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;A recent favorite: &lt;a href=&quot;https://github.com/amacneil/dbmate&quot;&gt;dbmate&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Finally, a great option I have been enjoying lately is &lt;a href=&quot;https://github.com/amacneil/dbmate&quot;&gt;dbmate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a standalone, library and language-independent migration tool. &lt;b&gt;dbmate&lt;/b&gt; itself is written in Go, so it can be easily built as a standalone binary for many platforms (on Mac OS you can install it with &lt;code&gt;brew install dbmate&lt;/code&gt;). It&amp;#8217;s designed to run as a separate tool from your runtime application process, which gives you a lot of flexibility in how you integrate it with your deployment workflow. And since it&amp;#8217;s deployed as a standalone binary, you don&amp;#8217;t need to integrate an additional language dependency chain into your environment just to support your migration tool.&lt;/p&gt;
&lt;p&gt;The dbmate CLI includes many of the common commands you&amp;#8217;ll find in ActiveRecord or other tools:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;COMMANDS:
     new, n          Generate a new migration file
     up              Create database (if necessary) and migrate to the latest version
     create          Create database
     drop            Drop database (if it exists)
     migrate         Migrate to the latest version
     rollback, down  Rollback the most recent migration
     dump            Write the database schema to disk
     wait            Wait for the database to become available
     help, h         Shows a list of commands or help for one command
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, you store your migrations in a &lt;code&gt;db/migrations&lt;/code&gt; directory in your project, and you can generate a new one with the &lt;code&gt;new&lt;/code&gt; command: &lt;code&gt;dbmate new create_users_table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This will generate a placeholder file which you can then populate with the contents of your migration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- migrate:up&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- migrate:down&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can run &lt;code&gt;dbmate up&lt;/code&gt; to create the database (if necessary) and migrate it to the latest version.&lt;/p&gt;
&lt;p&gt;dbmate uses the environment variable &lt;code&gt;DATABASE_URL&lt;/code&gt; for its configuration, so a full example might look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;postgres://postgres:postgres@localhost:5432/my_db&amp;quot;&lt;/span&gt; dbmate up
Creating: my_db
Applying: 20190816175153_create_users.sql
Writing: ./db/schema.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can see what it created here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d my_db
psql (10.8 (Ubuntu 10.8-1.pgdg16.04+1))
Type &amp;quot;help&amp;quot; for help.

my_db=&amp;gt; \dt
               List of relations
 Schema |       Name        | Type  |  Owner
--------+-------------------+-------+----------
 public | schema_migrations | table | postgres
 public | users             | table | postgres
(2 rows)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that dbmate automatically created the &lt;code&gt;schema_migrations&lt;/code&gt; table which it uses to track schema versions.&lt;/p&gt;
&lt;p&gt;I like this tool for data engineering projects in particular, since we often have unconventional deployment models.&lt;/p&gt;
&lt;p&gt;For example my &amp;#8220;application&amp;#8221; might be a collection of Airflow DAGs that manage ETL in and out of some database. Projects like these often don&amp;#8217;t revolve around a core framework or application server, so sometimes it can be simpler to just manage database migrations as an independent process. And this is where a standalone tool like dbmate can really shine.&lt;/p&gt;
&lt;h3&gt;Postscript: What about non-SQL DBs?&lt;/h3&gt;
&lt;p&gt;More to come!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Identify Non-HTTPS Transitive Leiningen Dependencies</title>
   <link href="http://worace.works/2018/05/29/identify-non-https-transitive-leiningen-dependencies/"/>
   <updated>2018-05-29T00:00:00-07:00</updated>
   <id>http://worace.works/2018/05/29/identify-non-https-transitive-leiningen-dependencies</id>
   <content type="html">&lt;p&gt;If you&amp;#8217;ve been using Leiningen any time over the last several months you have likely run into the dreaded error: &lt;code&gt;Tried to use insecure HTTP repository without TLS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is due to a change in &lt;a href=&quot;https://github.com/technomancy/leiningen/blob/master/NEWS.md#280-rc1--2017-09-18&quot;&gt;Leiningen 2.8&lt;/a&gt; which blocks non-TLS remote maven repositories. The change itself is well-intentioned and reasonable: relying on non-HTTPS dependencies is, overall, a bad idea. However dealing with it has caused lots of headaches for people who have a non-HTTPS dependency buried somewhere in their tree but don&amp;#8217;t know which one it is or where it&amp;#8217;s coming from.&lt;/p&gt;
&lt;p&gt;The Leiningen FAQ contains a note directing you to either track down the offending dependency and exclude it, or include a scary code snippet in your &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;Others I know have even resorted to just downgrading back to Leiningen 2.7.1 to avoid dealing with this issue (j.k. this was definitely me for a while).&lt;/p&gt;
&lt;h3&gt;Find problematic dependencies&lt;/h3&gt;
&lt;p&gt;Unfortunately Leiningen and the dependency-management tools it uses under the hood (e.g. &lt;a href=&quot;https://wiki.eclipse.org/Aether/What_Is_Aether&quot;&gt;Aether&lt;/a&gt;) don&amp;#8217;t currently have an out-of-the-box solution for pointing out which of your transitive deps are being pulled in from non-TLS sources.&lt;/p&gt;
&lt;p&gt;However it is possible to cobble together something using existing tools:&lt;/p&gt;
&lt;h4&gt;1. Add the &amp;#8220;Never do this&amp;#8221; snippet to your &lt;code&gt;project.clj&lt;/code&gt;:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; never do this&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cemerick.pomegranate.aether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cemerick.pomegranate.aether/register-wagon-factory!&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.apache.maven.wagon.providers.http.HttpWagon.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just temporarily, we&amp;#8217;ll take it out once we&amp;#8217;re done.&lt;/p&gt;
&lt;h4&gt;2. Generate a &lt;code&gt;pom.xml&lt;/code&gt; file for your project:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lein pom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we added the TLS authorization snippet, leiningen should be able to download whatever it needs to succeed in this step.&lt;/p&gt;
&lt;p&gt;This will let us use maven dependency management plugins since they can read the generated pom.xml file.&lt;/p&gt;
&lt;h4&gt;3. Clear your maven cache&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf ~/.m2/repository
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will force maven to re-download dependencies in the next step.&lt;/p&gt;
&lt;p&gt;In theory there are other maven tools like the &lt;a href=&quot;https://maven.apache.org/plugins/maven-dependency-plugin/purge-local-repository-mojo.html&quot;&gt;purge-local-repository&lt;/a&gt; plugin which would let us do this without destroying the whole cache, but I found they missed some insecure dependencies in my project. YMMV.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re concerned about losing stuff in your cache you can always save it somewhere and move it back when you&amp;#8217;re done: &lt;code&gt;mv ~/.m2/repository ~/.m2/repository_BAK&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;4. Use maven to download your deps&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mvn dependency:tree &amp;gt; tree.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The trick here is that maven is a little more verbose when downloading dependencies than leiningen, and it will show you the full URL which was used to retrieve each package.&lt;/p&gt;
&lt;h4&gt;5. Search for any non-https entries&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;http:&amp;quot;&lt;/span&gt; tree.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should find some entries like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Downloading: http://maven.my-company.com/nexus/content/groups/public/com/mycorp/mypackage/1.0.0/maven-metadata.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These will be the ones you want to exclude.&lt;/p&gt;
&lt;h3&gt;Exclude the offending entries&lt;/h3&gt;
&lt;p&gt;Remember that a maven artifact URL like &lt;code&gt;http://maven.my-company.com/nexus/content/groups/public/com/mycorp/mypackage/1.0.0/maven-metadata.xml&lt;/code&gt; translates to &lt;code&gt;[com.mycorp/mypackage &amp;quot;1.0.0&amp;quot;]&lt;/code&gt; in leiningen vector form.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve identified the problematic deps, you can exclude them using the &lt;a href=&quot;https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L91-L92&quot;&gt;:exclusions key&lt;/a&gt; in your project.clj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:exclusions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;com.mycorp/mypackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If they turn out to be things you actually need, you may have to go find a compatible version from an HTTPS source to replace them with.&lt;/p&gt;
&lt;h3&gt;Clean Up&lt;/h3&gt;
&lt;p&gt;Finally, to clean up all the debugging you had to do to get here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove the &lt;code&gt;Never do this&lt;/code&gt; HTTP authorization snippet from your &lt;code&gt;project.clj&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Clear your maven cache again to wipe out any non-https dependencies you downloaded in the process&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Manually download JAR to local Maven cache</title>
   <link href="http://worace.works/2018/04/25/manually-download-jar-to-local-maven-cache/"/>
   <updated>2018-04-25T00:00:00-07:00</updated>
   <id>http://worace.works/2018/04/25/manually-download-jar-to-local-maven-cache</id>
   <content type="html">&lt;p&gt;Sometimes I need to install a JAR from a remote Maven server into my local &lt;code&gt;~/.m2&lt;/code&gt; repository for testing or experimentation (i.e. in absence of an actual pom.xml / project.clj / build.sbt file).&lt;/p&gt;
&lt;p&gt;It always takes longer to figure this out than I&amp;#8217;d expect since &lt;code&gt;mvn&lt;/code&gt; doesn&amp;#8217;t have something as easy as Ruby or Python&amp;#8217;s &lt;code&gt;gem/pip install &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is supported though and you can do it with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;GROUP&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;PACKAGE&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -Dversion&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;VERSION&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      dependency:get
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.locationtech.jts &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jts-core &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -Dversion&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.15.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      dependency:get
&lt;span class=&quot;c1&quot;&gt;# [Maven Output...]&lt;/span&gt;
$ find ~/.m2 -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*jts-core*jar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# /home/horace/.m2/repository/org/locationtech/jts/jts-core/1.15.0/jts-core-1.15.0.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fetch one from an internal or private maven repo, you can use the additional setting &lt;code&gt;remoteRepositories&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn -DremoteRepositories&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;MAVEN URL&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;GROUP&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;PACKAGE&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -Dversion&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;VERSION&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      dependency:get
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if you&amp;#8217;re running &lt;a href=&quot;https://www.sonatype.com/nexus-repository-sonatype&quot;&gt;Nexus&lt;/a&gt;, you may need the full url to your releases directory, e.g. &lt;code&gt;http://maven.my.company.com/nexus/content/repositories/releases&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Put a Map On It: Tools for Visualizing Geo Data</title>
   <link href="http://worace.works/2018/03/01/put-a-map-on-it/"/>
   <updated>2018-03-01T00:00:00-08:00</updated>
   <id>http://worace.works/2018/03/01/put-a-map-on-it</id>
   <content type="html">&lt;p&gt;Geospatial data is everywhere these days, and with it comes the need for simple ways to put things on a map.&lt;/p&gt;
&lt;p&gt;Mapping needs fit into a variety of use-cases, from quick-and-dirty visualizations of a few points or polygons to sophisticated, interactive applications that let users search, browse, and edit.&lt;/p&gt;
&lt;p&gt;In this post we&amp;#8217;ll walk through a few of the current options out there in order from simple to complex.&lt;/p&gt;
&lt;h2&gt;Data Formats&lt;/h2&gt;
&lt;p&gt;Before diving into specific mapping tools, a note on data formats.&lt;/p&gt;
&lt;p&gt;The most popular open formats for serializing geospatial data are &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text&quot;&gt;WKT&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/GeoJSON&quot;&gt;GeoJSON&lt;/a&gt;, and &lt;a href=&quot;http://edndoc.esri.com/arcsde/9.1/general_topics/wkb_representation.htm&quot;&gt;WKB&lt;/a&gt; (a binary version of WKT). Each has pros and cons, but on the web GeoJSON is gradually winning out thanks to its obvious JSON compatibility.&lt;/p&gt;
&lt;p&gt;In a nutshell GeoJSON defines standards for representing the fundamental geospatial geometry types (Points, LineStrings, Polygons, MultiPolygons, and some various Collection types) using JSON.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re new to working with GeoJSON or would like to read about it in more detail, the best resource I know is Tom MacWright&amp;#8217;s thorough overview: &lt;a href=&quot;https://macwright.org/2015/03/23/geojson-second-bite&quot;&gt;More than you ever wanted to know about GeoJSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lots of tools work GeoJSON, or at least can export to it (for example PostGIS&amp;#8217;s &lt;code&gt;ST_AsGeoJSON&lt;/code&gt; function). For considering the tools below, we&amp;#8217;ll assume you&amp;#8217;ve generated some GeoJSON data through some other process and need a simple way to visualize it.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice that many of the tools listed below come from the fine folks at &lt;a href=&quot;https://www.mapbox.com/help/add-points-pt-1/&quot;&gt;Mapbox&lt;/a&gt;. Mapbox has become a standard bearer of open mapping tools over the last several years, so big thanks to them for providing so many useful tools to the community!&lt;/p&gt;
&lt;h2&gt;1. GitHub Gists&lt;/h2&gt;
&lt;p&gt;GitHub&amp;#8217;s document hosting platform is packed with features, including the ability to render uploaded GeoJSON data on a map. This Gist feature isn&amp;#8217;t that well known, but it can be pretty handy and makes it easy to share small amounts of GeoJSON on a map.&lt;/p&gt;
&lt;p&gt;Simply upload a file within a Gist ending in &lt;code&gt;.geojson&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/GeoJSONGist.png&quot;&gt;&lt;img src=&quot;/public/images/GeoJSONGist.png&quot; alt=&quot;/public/images/GeoJSONGist.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And Github will render it for you on a map: &lt;a href=&quot;https://gist.github.com/worace/540d89a5dbaa0b6274cd19f6ab6d4994&quot;&gt;https://gist.github.com/worace/540d89a5dbaa0b6274cd19f6ab6d4994&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can read more about mapping with Github Gists and the styling properties supported in their &lt;a href=&quot;https://help.github.com/articles/mapping-geojson-files-on-github/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Customizing Styling with Properties&lt;/h4&gt;
&lt;p&gt;You can control how Gist styles your map by setting certain attributes within the &lt;code&gt;properties&lt;/code&gt; of your GeoJSON features.&lt;/p&gt;
&lt;p&gt;For example uploading a GeoJSON Point with a &lt;code&gt;marker-color&lt;/code&gt; property sets the color of that pin on the map:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;marker-color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;-118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/marker.png&quot;&gt;&lt;img src=&quot;/public/images/marker.png&quot; alt=&quot;/public/images/marker.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Read more about the supported styling properties &lt;a href=&quot;https://help.github.com/articles/mapping-geojson-files-on-github/#styling-features&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Posting with the &amp;#8220;gist&amp;#8221; CLI&lt;/h4&gt;
&lt;p&gt;Sometimes it can be handy to create a gist from the command line (for example if you want to avoid copying and pasting a large file, or are generating data from a shell pipeline).&lt;/p&gt;
&lt;p&gt;Gists can be created in this way using the &lt;a href=&quot;https://github.com/defunkt/gist&quot;&gt;Gist CLI&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install gist
cat /my/geo/data.geojson &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gist -f my_file.geojson
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default gists created using the CLI are public and anonymous, so be sure to &lt;a href=&quot;https://github.com/defunkt/gist#login&quot;&gt;Log In&lt;/a&gt; if you want to create gists on your own account.&lt;/p&gt;
&lt;h2&gt;2. geojson.io&lt;/h2&gt;
&lt;p&gt;Next on the list is Mapbox&amp;#8217;s &lt;a href=&quot;http://geojson.io&quot;&gt;geojson.io&lt;/a&gt;. The software behind this tool is actually open source (&lt;a href=&quot;https://github.com/mapbox/geojson.io&quot;&gt;repo here&lt;/a&gt;), but Mapbox hosts an instance of it as a service to the community.&lt;/p&gt;
&lt;p&gt;At its core geojson.io is a big text box where you can paste geojson data and have it rendered on the adjacent map.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/geojsonio.png&quot;&gt;&lt;img src=&quot;/public/images/geojsonio.png&quot; alt=&quot;/public/images/geojsonio.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However it also includes some tools for adding and editing shapes, and can export to a variety of other geo formats or to Github Gists or b.locks.org for hosting a more permanent version of a map.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a great tool for quickly checking things out or iterating on some geodata pipeline.&lt;/p&gt;
&lt;h2&gt;3. Mapbox Studio&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/studio_dataset.png&quot;&gt;&lt;img src=&quot;/public/images/studio_dataset.png&quot; alt=&quot;/public/images/studio_dataset.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gists and geojson.io can take you pretty far for simple visualizations, but they both degrade in performance as the size of your data gets larger.&lt;/p&gt;
&lt;p&gt;GeoJSON is convenient because it&amp;#8217;s implemented as a subset of JSON, the web&amp;#8217;s data lingua franca. But it&amp;#8217;s not especially efficient, and copy-pasting large blobs of it between browser text boxes or other web tools can quickly bring things to a crawl.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have any hard or measured limits on this, but in my experience anything above a couple megabytes starts to feel pretty sluggish in gist or geojson.io (and github gists seems to have trouble editing files this large, causing your data to get garbled on subsequent updates).&lt;/p&gt;
&lt;p&gt;For datasets in this size range, &lt;a href=&quot;https://www.mapbox.com/mapbox-studio/&quot;&gt;Mapbox Studio&lt;/a&gt; becomes more attractive.&lt;/p&gt;
&lt;p&gt;Studio is really a full-featured cartographic toolkit, and boasts a lot of cool features which are beyond the scope of this overview. But for now we&amp;#8217;re focused on the ability to create &lt;i&gt;datasets&lt;/i&gt; by uploading GeoJSON files.&lt;/p&gt;
&lt;p&gt;Internally, Mapbox will convert your GeoJSON dataset into their own, more efficient, &lt;a href=&quot;https://www.mapbox.com/vector-tiles/&quot;&gt;Vector Tile&lt;/a&gt; format. This process takes a bit more work than simply pasting some GeoJSON into a text box on another webpage, but it means you&amp;#8217;ll be able to view much larger datasets more efficiently. If you&amp;#8217;re interested, you can also use Mapbox Studio to customize the styling of layers in your map as well.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/new_dataset.png&quot;&gt;&lt;img src=&quot;/public/images/new_dataset.png&quot; alt=&quot;/public/images/new_dataset.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating datasets and tilesets in Mapbox Studio is not difficult, but does involve a few steps, so for detailed instructions follow &lt;a href=&quot;https://www.mapbox.com/help/add-points-pt-1/&quot;&gt;Mapbox&amp;#8217;s detailed tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve uploaded data for a dataset and converted your dataset to a tileset, you&amp;#8217;ll be able to add it to a new Mapbox &lt;i&gt;style&lt;/i&gt;, which can be used to generate a custom map using the MapboxGL SDK.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/studio_style.png&quot;&gt;&lt;img src=&quot;/public/images/studio_style.png&quot; alt=&quot;/public/images/studio_style.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4. MapboxGL&lt;/h2&gt;
&lt;p&gt;Last on the list is the heaviest hitter, &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/&quot;&gt;MapboxGL&lt;/a&gt; (specifically the JS API). This is Mapbox&amp;#8217;s full-featured mapping SDK, on which most of their other visualization tools (like Mapbox Studio) are built. It exposes a detailed API for creating maps with code, giving developers the power to create heavily customized and interactive map applications.&lt;/p&gt;
&lt;p&gt;Of course, with greater power and flexibility comes a steeper learning curve, so a few things to mention:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating a map with the Mapbox SDK requires writing some code, even for simple examples&lt;/li&gt;
  &lt;li&gt;The SDK is fairly complex, and learning all its features in detail can take some time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lots of great tutorials on the web about working with mapboxgl-js, so I won&amp;#8217;t attempt to provide a detailed tutorial here, but I will briefly touch on a few of the key concepts that I found helpful when I started working with mapboxgl-js.&lt;/p&gt;
&lt;h3&gt;Sources &amp;amp; Layers&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;source&lt;/code&gt; in mapboxGL represent collections of geodata. This can be static data that is hardcoded into your application, or something more dynamic, like collections of points or polygons fetched from an API server you control.&lt;/p&gt;
&lt;p&gt;There are a few different types of sources, but I most frequently use the &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource&quot;&gt;GeoJSONSource&lt;/a&gt;, and that&amp;#8217;s what we&amp;#8217;ll look at in this example.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve added a data source to your map, you can then add &lt;code&gt;layers&lt;/code&gt; which render that data in some way. For example if you&amp;#8217;ve added some polygons to your map you might add a &lt;code&gt;fill&lt;/code&gt; layer to color them in on the map.&lt;/p&gt;
&lt;p&gt;Layers are meant to be composed fairly atomically, so if you want your polygons to be shaded as well as outlined, you will need to add 2 layers: one &lt;code&gt;fill&lt;/code&gt; layer for the shading and another &lt;code&gt;line&lt;/code&gt; layer for the outline stroke. This took me a little while to get used to but it gives you a lot of power and flexibility to style a map as you want.&lt;/p&gt;
&lt;h3&gt;Hello World Example&lt;/h3&gt;
&lt;p&gt;Mapbox has tons of great examples on their documentation site, so you should &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/example/simple-map/&quot;&gt;start there&lt;/a&gt; if you&amp;#8217;re looking for a specific use case. But here&amp;#8217;s a short example of a basic &amp;#8220;hello world&amp;#8221; map display with a source and a layer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/worace/pen/oEVxzv&quot;&gt;(View the example on Codepen)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Display a map&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;viewport&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;initial-scale=1,maximum-scale=1,user-scalable=no&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// You should get your own access token by signing up for a free account at https://www.mapbox.com/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pk.eyJ1Ijoid29yYWNlIiwiYSI6ImNpeWMxOW1jcjAwYWUyd294ZzQ0YnMyZ3QifQ.ZaWekMcNTGFN-TmpPkf9AA&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// container id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mapbox://styles/mapbox/streets-v9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also try dark-v9 or light-v9&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting position [lng, lat]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting zoom&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;FeatureCollection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_upload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin_upload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4185041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771249652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wait for map to fully load before trying to add data&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;geojson&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point-circles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Matches the ID we gave to our source above&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should give you a simple map with 2 points:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/points_raw.png&quot;&gt;&lt;img src=&quot;/public/images/points_raw.png&quot; alt=&quot;/public/images/points_raw.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Data-Driven Styling&lt;/h3&gt;
&lt;p&gt;MapboxGL is meant for creating maps programmatically on top of dynamic data &amp;#8211; if you just have a small amount of static data to view ad-hoc, one of the other tools mentioned above is probably a better fit.&lt;/p&gt;
&lt;p&gt;To this end, it also provides ways to customize the styling of different map elements based on their metadata (&lt;code&gt;properties&lt;/code&gt; in a GeoJSON object).&lt;/p&gt;
&lt;p&gt;A GeoJSON &lt;code&gt;feature&lt;/code&gt; consists of a &lt;code&gt;geometry&lt;/code&gt; &amp;#8211; a point, polygon, linestring, etc &amp;#8211; and a JSON Object of arbitrary &lt;code&gt;properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_upload&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;-118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GeoJSON &lt;code&gt;properties&lt;/code&gt; are arbitrary &amp;#8211; you can use them to store whatever metadata is relevant to your application.&lt;/p&gt;
&lt;p&gt;A common mapping use-case, then, would be to customize the styling of this point based on an attribute of these properties. Mapbox calls this &amp;#8220;data-driven styling.&amp;#8221; In our example above we included a property of &lt;code&gt;point_source&lt;/code&gt; on each of our points. Here&amp;#8217;s how we would change the layer to style the circle color based on that attribute:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point-circles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;paint&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle-color&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point_source&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_uploaded&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;#0000ff&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the second point has the value &lt;code&gt;admin_upload&lt;/code&gt;, which doesn&amp;#8217;t have a color explicitly specified, so it gets the default value of &lt;code&gt;#0000ff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/points_styled.png&quot;&gt;&lt;img src=&quot;/public/images/points_styled.png&quot; alt=&quot;/public/images/points_styled.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wrapup&lt;/h3&gt;
&lt;p&gt;This brief overview only scratches the surface of all you can do with MapboxGL. It&amp;#8217;s a complex library and takes some time to master, but it&amp;#8217;s the best developer tool out there for creating complex mapping applications.&lt;/p&gt;
&lt;p&gt;As always, check out &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/&quot;&gt;their documentation&lt;/a&gt; and &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/example/&quot;&gt;examples&lt;/a&gt; for more info.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Good Enough Clojure Setup for Beginners</title>
   <link href="http://worace.works/2016/06/14/good-enough-clojure-setup/"/>
   <updated>2016-06-14T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/14/good-enough-clojure-setup</id>
   <content type="html">&lt;p&gt;This document will go over a simple but effective Clojure setup aimed at beginners, and especially those used to editing Ruby, Javascript, or other dynamic languages using Atom.&lt;/p&gt;
&lt;h2&gt;The Basics &amp;#8211; JDK and Leiningen&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re brand new to Clojure you&amp;#8217;re in luck, since it&amp;#8217;s pretty easy to install. Clojure is built to run on the JVM (Clojure the language is technically just a Java library). The JVM is incredibly ubiquitous, and thanks to this it&amp;#8217;s pretty easy to get Clojure up and running on most machines. Try the following steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do you have JDK version 1.6+ installed?
    &lt;ul&gt;
      &lt;li&gt;Check by running &lt;code&gt;java -version&lt;/code&gt; &amp;#8211; Hope for something like &lt;code&gt;java version 1.8.0_65&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;If not, &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;install Java by following the instructions here.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen, a Clojure build tool.&lt;/a&gt; Leiningen gives us some tools for managing Clojure dependencies and running projects or other tasks &amp;#8211; it&amp;#8217;s somewhat analagous to a combination of Bundler and Rake from the Ruby world. On OS X it&amp;#8217;s easy to unstall using Homebrew: &lt;code&gt;brew install leiningen&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Verify it&amp;#8217;s all working &amp;#8211; You should now be able to run the command &lt;code&gt;lein repl&lt;/code&gt; to boot a Clojure REPL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/LeinRepl.png&quot; alt=&quot;/public/images/LeinRepl.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Text Editor: Atom&lt;/h2&gt;
&lt;p&gt;Atom may not be the first editor that comes to mind for doing Clojure development, but thanks to its rapidly growing package ecosystem, it&amp;#8217;s actually possible to put together a pretty solid Clojure dev environment on top of Atom.&lt;/p&gt;
&lt;p&gt;More sophisticated editors like Emacs or Cursive may be more popular for developers doing full-time Clojure work in industry, but the additional features and configuration are often distracting for beginners and are overkill for what we want to do anyway.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at a few packages that make working with Clojure much nicer in Atom&lt;/p&gt;
&lt;h3&gt;Language: Clojure&lt;/h3&gt;
&lt;p&gt;The first stop is the &lt;a href=&quot;https://github.com/atom/language-clojure&quot;&gt;language-clojure&lt;/a&gt; package &amp;#8211; this will give us basic syntax highlighting for Clojure source files. There isn&amp;#8217;t much to this package from a usage standpoint &amp;#8211; install it via the atom package manager and it will just work.&lt;/p&gt;
&lt;p&gt;Syntax Highlighting!
  &lt;img src=&quot;/public/images/ClojureSyntaxHighlighting.png&quot; alt=&quot;/public/images/ClojureSyntaxHighlighting.png&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Proto Repl&lt;/h3&gt;
&lt;p&gt;A REPL is fairly indispensable for doing Clojure development. Clojure developers tend to emphasize a very interactive workflow &amp;#8211; boot your REPL, experiment in it, push some code to it from your editor, then apply the insights you gain from these experiments to improving your code.&lt;/p&gt;
&lt;p&gt;The REPL also gives us a convenient way to run tests, to read documentation (thanks to Clojure&amp;#8217;s built-in doc string feature) &amp;#8211; we can even use it to boot long-running processes like a webserver.&lt;/p&gt;
&lt;p&gt;But enough REPL preaching &amp;#8211; how do we get one? For a long time this was the biggest blocker to having a productive Clojure experience in Atom &amp;#8211; there just wasn&amp;#8217;t a great option for interactive REPL-driven development.&lt;/p&gt;
&lt;p&gt;Fortunately in October, 2015 the popular &lt;a href=&quot;https://github.com/jasongilman/proto-repl&quot;&gt;proto-repl&lt;/a&gt; package came out and brought with it a pretty darn good REPL setup for Atom. Proto-repl feels a little different at first from other REPLs you may have used in other languages, but it doesn&amp;#8217;t take long to get comfortable with it.&lt;/p&gt;
&lt;p&gt;Install the package using APM and go ahead and open the REPL either using the &amp;#8220;proto-repl&amp;#8221; entries under the Packages menu, or using the shortcut &lt;code&gt;Cmd-Option-L&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The REPL will take a second to boot, but once it does, play around with it by evaluating some Clojure code (use &lt;code&gt;Shift-Enter&lt;/code&gt; to submit code you type at the bottom of the REPL buffer).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/ProtoReplUsage.png&quot; alt=&quot;/public/images/ProtoReplUsage.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;CMD-Option-L&lt;/code&gt;: Start the REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift-Enter&lt;/code&gt;: Submit form in REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Up / Down Arrows&lt;/code&gt;: Navigate REPL history&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option-a&lt;/code&gt;: Run all tests in current project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option s&lt;/code&gt;: Send a highlighted selection of code to the REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Ctrl-Shift-c&lt;/code&gt;: Interrupt (e.g. if you accidentally make an infinite loop in the REPL)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option-r&lt;/code&gt;: Refresh namespaces (reload files in the current project into the repl &amp;#8211;  great for evaluating some new functions or other expressions you have written in a file into the REPL so you can play around with them there)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, if you&amp;#8217;d like to set up Proto-Repl to behave more like a traditional terminal, try adding the following keybindings to your Keymap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;atom-pane[data-active-item-name=&amp;quot;Clojure REPL&amp;quot;] atom-text-editor:not([mini])&amp;#39;:
  &amp;#39;enter&amp;#39;:&amp;#39;proto-repl:execute-text-entered-in-repl&amp;#39;
  &amp;#39;cmd-k&amp;#39;:&amp;#39;proto-repl:clear-repl&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will let us submit code to the REPL with ENTER rather than Shift-Enter, and also let us use Cmd-K to clear the REPL screen.&lt;/p&gt;
&lt;p&gt;This handful of keybindings above should give you enough tools to get started working interactively with Clojure code. Proto-Repl has quite a few neat features tucked into it, so once you get comfortable with the basics you should also check out &lt;a href=&quot;https://atom.io/packages/proto-repl&quot;&gt;proto-repl&amp;#8217;s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Parinfer&lt;/h3&gt;
&lt;p&gt;Newcomers often find working with Lisp code challenging, especially coming from more &amp;#8220;traditional&amp;#8221; Algol-inspired languages. The difficulty is that Lisp really wants to be edited &lt;i&gt;structurally&lt;/i&gt; rather than &lt;i&gt;textually&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;A Lisp program is really just a Tree of &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;expressions&lt;/a&gt;, and when we work with Lisp code we frequently want to manipulate the structure of this tree &amp;#8211; Move this expression Up a level, combine this expression with the one next to it, remove this expression from the tree entirely, etc.&lt;/p&gt;
&lt;p&gt;Sounds good, but it&amp;#8217;s complicated by ((((all) ((those) (((((parentheses))))))))) &amp;#8211; it&amp;#8217;s frustratingly easy when moving some Lisp code around to accidentally drop a parenthesis, add an extra one, or just leave one in the wrong spot.&lt;/p&gt;
&lt;p&gt;Over time developers have written tools to help manage this process. &lt;a href=&quot;https://www.emacswiki.org/emacs/ParEdit&quot;&gt;ParEdit&lt;/a&gt; is perhaps the most famous &amp;#8211; it&amp;#8217;s a popular Emacs package for manipulating parenthesis-based S-expressions in a structural way. It&amp;#8217;s a powerful tool but like many things in Emacs it comes with a learning curve.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s why I&amp;#8217;m excited by Parinfer - a tool that attempts to give a more &amp;#8220;intuitive&amp;#8221; or &amp;#8220;Just Do What I Mean&amp;#8221; approach to structural Lisp editing. The &lt;a href=&quot;https://shaunlebron.github.io/parinfer/&quot;&gt;docs on Parinfer&amp;#8217;s homepage&lt;/a&gt; do a better job of explaining the tool than I will, but the gist of it is &lt;i&gt;inferring&lt;/i&gt; Lisp structures based on the indentation of a chunk of code.&lt;/p&gt;
&lt;p&gt;As you edit code, Parinfer will attempt to guess the most sensible S-expression structure you intended based on the indentation and spacing you typed in the code. For example removing the indentation of a nested expression might be interpreted as &amp;#8220;move that expression UP one level.&amp;#8221; The great thing about Parinfer is there&amp;#8217;s not too much to learn &amp;#8211; just type correctly formatted code and it will (mostly) do the right thing.&lt;/p&gt;
&lt;p&gt;Luckily for us there&amp;#8217;s a great Parinfer implementation for Atom:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install the atom-parinfer package with APM: &lt;a href=&quot;https://github.com/oakmac/atom-parinfer&quot;&gt;https://github.com/oakmac/atom-parinfer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Play around with editing some Clojure code in your editor (make sure the file extension is set to &lt;code&gt;.clj&lt;/code&gt;) &amp;#8211; what happens when you type parentheses, indent them, or un-indent them?&lt;/li&gt;
  &lt;li&gt;Parinfer is pretty good at its job but every now and then you&amp;#8217;ll get into a sticky situation that needs to be sorted out manually. Don&amp;#8217;t forget you can use &lt;code&gt;Cmd-Shift-9&lt;/code&gt; to Toggle from &amp;#8220;Indent&amp;#8221; mode (what Parinfer normally does) to &amp;#8220;Paren&amp;#8221; mode (what we would do when just manipulating text in a more traditional editor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Auto Testing: Lein Test Refresh&lt;/h2&gt;
&lt;p&gt;The last Clojure tool that I find truly essential is a test-runner package called &lt;a href=&quot;https://github.com/jakemcc/lein-test-refresh&quot;&gt;lein-test-refresh.&lt;/a&gt; It gives us an awesome &amp;#8220;run my tests when I save a file&amp;#8221; experience for Clojure.&lt;/p&gt;
&lt;p&gt;Test-refresh is a leiningen plugin, so the easiest way to install it is to add it to your system-wide &amp;#8220;user&amp;#8221; leiningen profile, which is defined in the configuration file at &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;. To include the plugin, add it to your leiningen configuration like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;com.jakemccrary/lein-test-refresh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.15.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that your &lt;code&gt;profiles.clj&lt;/code&gt; file just contains a Clojure (technically &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt;) data structure. If your &lt;code&gt;profiles.clj&lt;/code&gt; is empty, you can simply paste the above line into the file. If you already have the &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:plugins&lt;/code&gt; entries defined, you&amp;#8217;ll need to add this new plugin vector (&lt;code&gt;[com.jakemccrary/lein-test-refresh &amp;quot;0.15.0&amp;quot;]&lt;/code&gt;) within the existing &lt;code&gt;:plugins&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;With this plugin installed, you can now run &lt;code&gt;lein test-refresh&lt;/code&gt; within any directory containing a &lt;code&gt;project.clj&lt;/code&gt; file, and leiningen will watch for your files to be edited and then run the tests in response. It&amp;#8217;s a great way to get really quick feedback from our test suite when working with code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/LeinTestRefresh.png&quot; alt=&quot;/public/images/LeinTestRefresh.png&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started with Emacs for Ruby</title>
   <link href="http://worace.works/2016/06/07/getting-started-with-emacs-for-ruby/"/>
   <updated>2016-06-07T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/07/getting-started-with-emacs-for-ruby</id>
   <content type="html">&lt;p&gt;Lately I&amp;#8217;ve been gradually drawing a few students at Turing into the Emacs fold. Along the way I&amp;#8217;ve been thinking about what is needed for a minimal but sufficient Emacs setup for working with Ruby code.&lt;/p&gt;
&lt;p&gt;In this post I&amp;#8217;ll try to document some of the tools and configuration I&amp;#8217;ve found useful, with an aim toward keeping things accessible for a newcomer to Emacs. The key features I&amp;#8217;ll focus on include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modernizing the Emacs UI using some sane defaults&lt;/li&gt;
  &lt;li&gt;Setting up basic Ruby syntax highlighting and syntax completion&lt;/li&gt;
  &lt;li&gt;Interactively evaluating code in Ruby buffers using Seeing Is Believing&lt;/li&gt;
  &lt;li&gt;Running a Ruby REPL from within emacs using inf-ruby-mode&lt;/li&gt;
  &lt;li&gt;Running Ruby tests from within emacs using ruby-test-mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now I won&amp;#8217;t be digging into any Rails-specific features &amp;#8211; hopefully I can cover this in another post, but this guide is focused on plain old Ruby.&lt;/p&gt;
&lt;h2&gt;Emacs Configuration 101&lt;/h2&gt;
&lt;p&gt;The Emacs configuration journey starts with a special directory on your machine located at &lt;code&gt;~/.emacs.d&lt;/code&gt;. When Emacs starts up, it will by default look for a file called &lt;code&gt;init.el&lt;/code&gt; in this directory and use that to load any user-specific configuration you want to provide. (This is similar to how your shell loads any user configuration files at &lt;code&gt;~/.profile&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt;, etc)&lt;/p&gt;
&lt;p&gt;To follow along, go ahead and create this directory and file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/.emacs.d
touch ~/.emacs.d/init.el
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your machine already has an Emacs configuration in this directory and you want to start from scratch, it&amp;#8217;s safe to stash the existing directory by moving it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv ~/.emacs.d ~/.emacs.d.old
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your original config will be waiting for you should you decide to return to it.&lt;/p&gt;
&lt;h3&gt;Baby&amp;#8217;s First Emacs Lisp&lt;/h3&gt;
&lt;p&gt;An astute reader will have noticed the extension of the init file we just created: &lt;code&gt;.el&lt;/code&gt;. This stands for Emacs Lisp, the language in which Emacs is written and scripted. It turns out Emacs is really a big old Lisp interpreter that happens to have some neat features for manipulating text buffers tucked away in the corners. So are you saying we&amp;#8217;ll be writing&amp;#8230; &lt;i&gt;Lisp&lt;/i&gt;? You bet your Free Software Foundation commemorative mousepad we are!&lt;/p&gt;
&lt;p&gt;When Emacs boots, it will process our &lt;code&gt;init.el&lt;/code&gt; as Emacs Lisp, so within this file we&amp;#8217;ll be writing Elisp expressions to customize how the editor behaves.&lt;/p&gt;
&lt;h2&gt;Emacs: Out of the 1990&amp;#8217;s&lt;/h2&gt;
&lt;p&gt;While there&amp;#8217;s a certain endearing homeliness to it, the first impression of a fresh Emacs install is fairly dated:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/emacs_splash_screen.png&quot; alt=&quot;/public/images/emacs_splash_screen.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The default Emacs configuration includes some clunky things like menu bars and a loud &amp;#8220;splash&amp;#8221; screen. &lt;a href=&quot;https://github.com/technomancy/better-defaults&quot;&gt;BetterDefaults&lt;/a&gt; is a popular Emacs package for improving this situation without getting too overboard with magical customizations.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by pulling BetterDefaults into our new config. This will also give us a good opportunity to talk about&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Emacs Packages&lt;/h3&gt;
&lt;p&gt;A &amp;#8220;package&amp;#8221; is the standard unit for distributing a chunk of Emacs code. There are several free online package repositories out there, the most popular being &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, &lt;a href=&quot;https://www.emacswiki.org/emacs/ELPA&quot;&gt;ELPA&lt;/a&gt;, &lt;a href=&quot;https://marmalade-repo.org/&quot;&gt;Marmalade&lt;/a&gt;, and &lt;a href=&quot;https://melpa.org/&quot;&gt;Melpa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, Emacs doesn&amp;#8217;t come with a built-in &amp;#8220;manifest&amp;#8221;-driven solution for defining what packages to use (like we might encounter with a Gemfile or package.json in a Ruby or Node project).&lt;/p&gt;
&lt;p&gt;Fortunately it&amp;#8217;s pretty easy to add this functionality, so go ahead and add this Elisp to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; list the repositories containing them&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gnu&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://elpa.gnu.org/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://melpa.org/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; activate all the packages (in particular autoloads)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; fetch the list of packages available&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archive-contents&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-refresh-contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; list the packages you want&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; install the missing packages&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-installed-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-install&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;better-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This first Elisp snippet defines a list of archives to use when searching for packages and then initializes the package system.&lt;/p&gt;
&lt;p&gt;Next we define a list of packages we want to install (so far just &lt;code&gt;better-defaults&lt;/code&gt;). Then we check to see if any of them are missing and, if so, install them. From now on, we can simply add packages to our &lt;code&gt;package-list&lt;/code&gt; and they should be automatically installed when we start Emacs &amp;#8211; similar to adding a new gem to your &lt;code&gt;Gemfile&lt;/code&gt; and running &lt;code&gt;bundle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;require&lt;/code&gt; expression on the last line loads the better-defaults package that we just installed, so you should see it taking effect.&lt;/p&gt;
&lt;p&gt;Save this file and restart Emacs if it&amp;#8217;s already running (remember: &lt;code&gt;C-x C-c&lt;/code&gt; to quit), and you should see emacs pause briefly as it installs the Better Defaults package. You should also see a slightly cleaner interface now that the toolbars are removed.&lt;/p&gt;
&lt;h2&gt;A Bit More UI:&lt;/h2&gt;
&lt;p&gt;Next let&amp;#8217;s get rid of the default Emacs splash screen and have it put us into an empty buffer instead. The &lt;code&gt;initial-major-mode&lt;/code&gt; setting can take any of Emacs&amp;#8217; major modes &amp;#8211; a lot of people use Org or Markdown mode for their scratch buffer, but since we&amp;#8217;re targeting a Ruby setup here, we&amp;#8217;ll use that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inhibit-splash-screen&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;initial-scratch-message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;initial-major-mode&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, it would be nice if it didn&amp;#8217;t look so glaringly white. Let&amp;#8217;s update our package list to pull in the ever-gentle-on-the-eyes &lt;a href=&quot;https://github.com/bbatsov/solarized-emacs&quot;&gt;Solarized Theme&lt;/a&gt; and load it in our init file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load-theme&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;solarized-dark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we add a few more bits of snazz like showing line numbers and setting a default font (&lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro&quot;&gt;SourceCodePro&lt;/a&gt; is a free, open source monospaced font for editing code from Adobe.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Show line numbers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-linum-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Typography&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-face-attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;default&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:family&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Source Code Pro&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:weight&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;normal&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;OS X Conveniences&lt;/h2&gt;
&lt;p&gt;I generally recommend people start out using Emacs in GUI mode (as opposed to the text-based terminal interface). Personally I still use this mode most often even a few years into using Emacs, but when starting out it&amp;#8217;s especially helpful to have some of the familiar OS X keybindings for Copying, Pasting, Cmd-Tabbing, etc. On a Mac you&amp;#8217;ll have this available if you installed using homebrew with the &lt;code&gt;--with-cocoa&lt;/code&gt; flag (&lt;code&gt;brew install emacs --with-cocoa&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also convenient to be able to open your editor from the command line and pass it a file or directory to start with. To make this easy, you can add this function to your shell profile (&lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, etc):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;em &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  open -a /usr/local/Cellar/emacs/24.5/Emacs.app/Contents/MacOS/Emacs &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then from the command line you&amp;#8217;ll be able to do things like &lt;code&gt;em pizza.el&lt;/code&gt; to open that file in an Emacs Cocoa app window.&lt;/p&gt;
&lt;h2&gt;Editor Basics: Find-In-Project and Ctrl-P&lt;/h2&gt;
&lt;p&gt;Next let&amp;#8217;s try to check off a couple more features from the &amp;#8220;What would I miss if I started using Emacs from Atom/SublimeText/TextMate?&amp;#8221; list. The 2 of these I find most essential are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;#8220;Ctrl-P&amp;#8221; or &amp;#8220;Cmd-T&amp;#8221;-style command to fuzzily open a file in the current project&lt;/li&gt;
  &lt;li&gt;Find-in-Project text search for finding an arbitrary string in the current project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can get these features pretty easily using 3 popular packages: &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;Helm&lt;/a&gt;, &lt;a href=&quot;https://github.com/bbatsov/helm-projectile&quot;&gt;Helm Projectile&lt;/a&gt; and &lt;a href=&quot;https://github.com/syohex/emacs-helm-ag&quot;&gt;Helm ag&lt;/a&gt;. Helm is actually something of a &amp;#8220;parent&amp;#8221; package for these other 2 &amp;#8211; it provides a generalized framework for doing the kind of slick &amp;#8220;fuzzily-search some text in a list of stuff&amp;#8221; interface that we all know and love. Then other packages like Helm Projectile and Helm ag can take advantage of this interaction to build neat tools like &amp;#8220;find a file in my project&amp;#8221; or &amp;#8220;find some text in my project.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Add these to your &lt;code&gt;package-list&lt;/code&gt; and give them some basic keybindings as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-M-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s-f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-projectile-ag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s-t&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-projectile-find-file-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;s&lt;/code&gt; in the keybinds here stands for the &amp;#8220;Super&amp;#8221; modifier, which in the OS X Cocoa app should be your &lt;code&gt;CMD&lt;/code&gt; Key. (The other modifier shortcuts we&amp;#8217;ll be seing include &lt;code&gt;C-&lt;/code&gt; for Control, &lt;code&gt;M-&lt;/code&gt; for Meta or Option, and &lt;code&gt;S-&lt;/code&gt; for shift).&lt;/p&gt;
&lt;p&gt;These bindings give us the familiar &lt;code&gt;Cmd-f&lt;/code&gt; for &amp;#8220;search for text in this project&amp;#8221; and &lt;code&gt;Cmd-t&lt;/code&gt; for &amp;#8220;find files in my project.&amp;#8221; Finally we also over-write the default &lt;code&gt;M-x&lt;/code&gt; keybinding to use helm&amp;#8217;s interface for searching for Emacs commands to run. Now when we need to look for a less familiar Emacs interactive command, the Helm interface will help us by fuzzily searching and narrowing among the available commands.&lt;/p&gt;
&lt;h2&gt;Ruby Basics: Highlighting and Auto-matching&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#8217;ve tamed Emacs into a slightly more well-behaved general editing environment, we can dive into our Ruby setup!&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with a bit of basic auto-matching for paired characters (parens, quotes, def/class/if-end, etc). Add &lt;code&gt;ruby-electric&lt;/code&gt; to your package list and tell emacs to require it automatically whenever we enter ruby mode like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Autoclose paired syntax elements like parens, quotes, etc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-electric-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes Ruby code appears in other kinds of files that don&amp;#8217;t end with the standard &lt;code&gt;.rb&lt;/code&gt; extension. We can tell emacs to treat these as ruby files using this snippet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;auto-mode-alist&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;auto-mode-alist&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ruby Version Manager&lt;/h2&gt;
&lt;p&gt;Most Ruby developers these days are using some kind of Version Manager to simplify the process of installing and jumping around between various ruby versions. This is a great feature to have, but it unfortunately adds another layer of indirection between Emacs and the Ruby installation living on our machine.&lt;/p&gt;
&lt;p&gt;To further complicate things, the community hasn&amp;#8217;t really standardized on any of the particular options, which means you&amp;#8217;re likely using one of Rbenv, RVM, or Chruby. Depending on which of these you&amp;#8217;re using, you&amp;#8217;ll want to pull in the appropriate config below:&lt;/p&gt;
&lt;h3&gt;RVM (Using &lt;a href=&quot;https://github.com/senny/rvm.el&quot;&gt;rvm.el&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Add the &lt;code&gt;rvm&lt;/code&gt; package and invoke it using &lt;code&gt;(rvm-use-default)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rvm-use-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;RBENV (using &lt;a href=&quot;https://github.com/senny/rbenv.el&quot;&gt;rbenv.el&lt;/a&gt; )&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;rbenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-rbenv-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rbenv-use-global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Optional -- if your RBENV installation is located somewhere besides&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ~/.rbenv, you will need to configure this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;(setq rbenv-installation-dir &amp;quot;/usr/local/rbenv&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Chruby (using &lt;a href=&quot;https://github.com/plexus/chruby.el&quot;&gt;chruby.el&lt;/a&gt;)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chruby&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2.2.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;;  or whichever version you want to use&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ruby Interactions: The Once and Future Workflow&lt;/h2&gt;
&lt;p&gt;Now that we have the groundwork out of the way we can tackle the good stuff. In this section we&amp;#8217;ll look at several tools for working interactively with Ruby code from within Emacs.&lt;/p&gt;
&lt;p&gt;Emacs comes from a rich history of interactive, REPL-driven Lisp development environments. Combined with being deeply programmable (thanks to Emacs Lisp), this makes it ideal for creating a smoothly interactive development environment. We want to reduce the time and effort required to get feedback from running our code as much as possible, and Emacs can help accomplish this.&lt;/p&gt;
&lt;p&gt;In the context of Ruby code, I specifically want to be able to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Arbitrarily evaluate Ruby code from the current buffer&lt;/li&gt;
  &lt;li&gt;Open an interactive ruby session (i.e. REPL &amp;#8211; IRB or Pry) within Emacs&lt;/li&gt;
  &lt;li&gt;Run tests from within Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s check out some neat Emacs packages that make interactions like these possible.&lt;/p&gt;
&lt;h3&gt;Ruby Buffer Interaction &amp;#8211; Seeing truly is believing&lt;/h3&gt;
&lt;p&gt;First, install the Gem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install seeing_is_believing --version &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.0.0.beta.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add and configure the corresponding Emacs package:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seeing-is-believing-prefix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;seeing-is-believing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;seeing-is-believing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs and open up a sample Ruby file. Try experimenting with the following keybindings to see what Seeing Is Believing gives us:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-. s&lt;/code&gt; - Run Seeing is Believing for the entire file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. c&lt;/code&gt; - Clear the Seeing is Believing output&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. t&lt;/code&gt; - Tag a line to be &amp;#8220;targeted&amp;#8221; for evaluation by SiB&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. x&lt;/code&gt; - Run only the &amp;#8220;tagged&amp;#8221; lines (those with trailing &amp;#8220;# =&amp;gt; &amp;#8221; markers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully you&amp;#8217;re seeing some output show up at the end of your Ruby source lines. Seeing is Believing is a Gem that runs a chunk of Ruby code and prints out (in an existing text buffer) the result of evaluating each line. For our purposes, this gives us a very powerful way to quickly interact with a chunk of code &amp;#8211; directly from our Emacs buffer!&lt;/p&gt;
&lt;p&gt;To learn more, check out the docs for the &lt;a href=&quot;https://github.com/JoshCheek/seeing_is_believing&quot;&gt;Seeing Is Believing Gem&lt;/a&gt; and &lt;a href=&quot;https://github.com/jcinnamond/seeing-is-believing&quot;&gt;seeing-is-believing.el&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;inf-ruby &amp;#8211; IRB from Emacs&lt;/h3&gt;
&lt;p&gt;Next stop is a neat package called &lt;a href=&quot;https://github.com/nonsequitur/inf-ruby&quot;&gt;inf-ruby&lt;/a&gt;. In the tradition of other Emacs Inferior Language Modes, it gives us an embedded IRB process running inside of Emacs, as well as some standard keybindings to interact with the REPL by sending code snippets to it from a buffer.&lt;/p&gt;
&lt;p&gt;First, install and configure inf-ruby:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;inf-ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;inf-ruby-minor-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;inf-ruby&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Run an inferior Ruby process&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;inf-ruby-minor-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs then open up a Ruby file somewhere. Try out the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;C-c C-s&lt;/code&gt; to launch the inf-ruby process.&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;C-x o&lt;/code&gt; to switch to the inf-ruby pane and try running some random ruby snippets as you normally would from IRB or pry.&lt;/li&gt;
  &lt;li&gt;Go back to your Ruby buffer, select (by highlighting) a chunk of code, and use &lt;code&gt;C-c C-r&lt;/code&gt; to &lt;b&gt;push&lt;/b&gt; that Ruby code into the IRB session.&lt;/li&gt;
  &lt;li&gt;For example, try defining a class in your Ruby buffer, select the whole buffer, run &lt;code&gt;C-c C-r&lt;/code&gt;, then swap over to the inf-ruby buffer and instantiate an instance of your class. Pretty cool!&lt;/li&gt;
  &lt;li&gt;Alternatively, use &lt;code&gt;C-c M-r&lt;/code&gt; to run a selected chunk of code and automatically go to the ruby buffer&lt;/li&gt;
  &lt;li&gt;Finally, use &lt;code&gt;helm-M-x&lt;/code&gt; (which we bound earlier to the default &lt;code&gt;M-x&lt;/code&gt; keybinding) to search for &amp;#8220;ruby send&amp;#8221; and see what other default bindings inf-ruby gives us.&lt;/li&gt;
  &lt;li&gt;If you do a lot of work in Rails or Sinatra, check out the commands &lt;code&gt;inf-ruby-console-rails&lt;/code&gt; and &lt;code&gt;inf-ruby-console-racksh&lt;/code&gt;. Using these commands inf-ruby can start a console session in the environment of your web project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ruby TDD &amp;#8211; &lt;a href=&quot;https://github.com/r0man/ruby-test-mode&quot;&gt;ruby-test-mode.el&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now for the last item on our interactive workflow checklist &amp;#8211; running tests from Emacs. At its core, TDD is about incorporating more feedback into our development workflow. To take full advantage of this, we want running tests to be as seamless as possible &amp;#8211; no context switching of jumping out to a terminal, etc etc. We can accomplish this in Emacs using the ruby-test-mode package. First install and configure it in your init file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;inf-ruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs, then open a Ruby test file. Experiment with the keybinding &amp;#8220;C-c C-,&amp;#8221; - it should allow you to run the tests from the current file into a second buffer called a compilation buffer. Tests from directly within emacs &amp;#8211; pretty neat!&lt;/p&gt;
&lt;p&gt;By default, ruby-test-mode will try to evaluate tests in the current buffer. It determines whether the current buffer contains tests based on whether its filename ends in &lt;code&gt;_test.rb&lt;/code&gt; or &lt;code&gt;_spec.rb&lt;/code&gt; &amp;#8211; so if you don&amp;#8217;t follow these conventions it may behave erratically for you.&lt;/p&gt;
&lt;p&gt;If the current buffer is &lt;i&gt;not&lt;/i&gt; a Ruby test, it will try to do one of the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If there is a visible test buffer in another window (for example, you have 2 windows open in a side-by-side split), it will run that one. This is great for putting a test and an implementation up side-by-side and being able to run the test from either window.&lt;/li&gt;
  &lt;li&gt;If none of these are available, it will try to re-run whatever test was last run, if there is one&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Improving Ruby Test Mode Interaction&lt;/h3&gt;
&lt;p&gt;This setup is coming along pretty nicely, but I find dealing with all the compilation buffers created by ruby-test-mode a little cumbersome. By default it pulls them up in a new window, which potentially covers up something you were working on before, or at least takes up half of your frame. Then you have to manually swap over and kill the buffer if you want to get rid of it.&lt;/p&gt;
&lt;p&gt;We can make this a little smoother by hooking into the compilation completion hook and setting up a keybinding to easily close the buffer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;compilation-finish-functions&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*compilation*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-only-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;local-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quit-restore-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when ruby-test-mode finishes our tests, we will automatically jump to the test buffer and scroll to the bottom.&lt;/p&gt;
&lt;p&gt;Additionally, within the compliation buffer we&amp;#8217;ll use the simple keybinding &lt;code&gt;q&lt;/code&gt; to close the buffer and return to whatever frame configuration we had before. I find this makes a much more seamless TDD workflow. We can run tests, quickly check out the results, and quit out to return to what you were doing before &amp;#8211; all without leaving Emacs.&lt;/p&gt;
&lt;h2&gt;Wrapup and Further Exploration&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve published a github repo containing the final product of this tutorial &lt;a href=&quot;https://github.com/worace/emacs-for-ruby&quot;&gt;here&lt;/a&gt;. I&amp;#8217;ll try to keep it (and this post) up to date as I uncover any problems or receive feedback. The biggest goal here was to keep things as simple and minimal as possible &amp;#8211; the whole thing comes in around 80 lines of Elisp using 10 or so packages.&lt;/p&gt;
&lt;p&gt;With this setup, the main things we accomplished include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Drag Emacs into the modern era using some sane defaults and a bit of UI polishing&lt;/li&gt;
  &lt;li&gt;Create a reasonably beginner-friendly environment that incorporates 2 of the killer convenience features of more mainstream editors like Sublime or Atom (Ctrl-P and Find-in-project)&lt;/li&gt;
  &lt;li&gt;Assemble a simple toolset for interactive Ruby development &amp;#8211; we can evaluate code in a buffer, start an embedded IRB process, and run our tests all from within Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few things that are obviously &lt;i&gt;not&lt;/i&gt; included (and where to find them) include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Rails-specific workflow features (check out &lt;a href=&quot;https://github.com/eschulte/rinari&quot;&gt;rinari&lt;/a&gt; if you want to use emacs to work on Rails)&lt;/li&gt;
  &lt;li&gt;Version control integration (&lt;a href=&quot;https://magit.vc/&quot;&gt;magit&lt;/a&gt; is the cadillac of in-editor VCS integrations)&lt;/li&gt;
  &lt;li&gt;Other language modes or integrations &amp;#8211; if it runs on a computer there&amp;#8217;s probably an Emacs mode for it &amp;#8211; dig around and see what exists for your favorite languages&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>RSA Cryptography In Clojure</title>
   <link href="http://worace.works/2016/06/05/rsa-cryptography-in-clojure/"/>
   <updated>2016-06-05T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/05/rsa-cryptography-in-clojure</id>
   <content type="html">&lt;p&gt;I recently found myself needing to do some public/private key cryptography using RSA in Clojure. Fortunately there is pretty good library support for doing this kind of thing in Java, but it still took me a while to get all of the interop working. Additionally, I needed to be able to serialize and de-serialize keys in a couple of formats (.pem and .der, specifically), so we&amp;#8217;ll look at setting this up as well.&lt;/p&gt;
&lt;h2&gt;Generating a Keypair&lt;/h2&gt;
&lt;p&gt;Keys are generated based on the desired length and algorithm. To generate a key we have to do a little bit of Java ceremony around requesting a &lt;code&gt;KeyPairGenerator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use this to generate a Private Key, and from that Private Key retrieve the Public Key if needed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kp-generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyPairGenerator/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initialize&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;generate-keypair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assert &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA Key must be at least 512 bits long.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generateKeyPair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kp-generator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keypair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate-keypair&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getPublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keypair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Encrypting, Decrypting, and Encoding Messages&lt;/h2&gt;
&lt;p&gt;The Java crypto methods we&amp;#8217;re using generally return a Byte Array of their encrypted data. For my use-case I wanted to encode these in Base64, which is easy in Java 8 thanks to the built-in Base64 module (For earlier versions, check out &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/javax/xml/bind/DatatypeConverter.html&quot;&gt;javax.xml.bind.DatatypeConverter&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.decode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.util.Base64/getDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.encodeToString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.util.Base64/getEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can use the keys we generated to encrypt and decrypt a message. This being public/private key crypto, remember of course that encryption is done using the public key and decryption using the private.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Perform RSA public key encryption of the given message string.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns a Base64-encoded string of the encrypted data.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javax.crypto.Cipher/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.init&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;javax.crypto.Cipher/ENCRYPT_MODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.doFinal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Use an RSA private key to decrypt a Base64-encoded string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   of ciphertext.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javax.crypto.Cipher/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.init&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;javax.crypto.Cipher/DECRYPT_MODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;decode64&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.doFinal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Signing and Verifying&lt;/h2&gt;
&lt;p&gt;The other big asymmetric crypto operation is to sign using a private key and verify using a public key. This is pretty easy with a bit of Java interop as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sign&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA private key signing of a message. Takes message as string&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Signature/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHA256withRSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initSign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.SecureRandom.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;verify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encoded-sig&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA public key verification of a Base64-encoded signature and an&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   assumed source message. Returns true/false if signature is valid.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoded-sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Signature/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHA256withRSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initVerify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.verify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Serializing and Deserializing Keys&lt;/h2&gt;
&lt;p&gt;Finally for my use-case it was important to be able to serialize and de-serialize keys in a format that would be readable by other systems. I found this part the trickiest to get working due to relatively sparse documentation and some confusion about the various formats and key serialization algorithms, but here it is.&lt;/p&gt;
&lt;h3&gt;DER Encoding Public Keys&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;der-string-&amp;gt;pub-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate an RSA public key from a DER-encoded Base64 string.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Some systems like to line-wrap these at 64 characters, so we&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   have to get rid of any newlines before decoding.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non-wrapped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/replace&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;key-bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;non-wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.X509EncodedKeySpec.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;key-factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-factory&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key-&amp;gt;der-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate DER-formatted string for a public key.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;DER Encoding Private Keys&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;der-string-&amp;gt;private-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePrivate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.PKCS8EncodedKeySpec.&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;private-key-&amp;gt;der-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pk&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;java.security.spec.PKCS8EncodedKeySpec.&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;PEM-Encoding&lt;/h2&gt;
&lt;p&gt;PEM-encoding is another common format for serializing cryptographic keys. I was able to get everything so far working using just pieces from Java&amp;#8217;s standard library, but after much experimentation could never get it to read PEM-encoded keys reliably. So I ended up reaching for &lt;a href=&quot;https://www.bouncycastle.org/java.html&quot;&gt;Bouncy Castle&lt;/a&gt;, one of the go-to crypto Java crypto libraries.&lt;/p&gt;
&lt;p&gt;BC supports a sizeable menu of different signing, hashing, and encryption algorithms. Fortunately for me reading and writing PEM keys was tucked in among them.&lt;/p&gt;
&lt;p&gt;To pull in BouncyCastle I used this &lt;code&gt;project.clj&lt;/code&gt; configuration for leiningen:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defproject &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block-chain&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.bouncycastle/bcpkix-jdk15on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.53&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then used it to decode the keys.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Have to do this bit of setup first so the keyparsers&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; can find BouncyCastle&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Security/addProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.jce.provider.BouncyCastleProvider.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reader&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.openssl.PEMParser.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.readObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pem-string-&amp;gt;key-pair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert a PEM-formatted private key string to a public/private keypair.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns java.security.KeyPair.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getKeyPair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pem-string-&amp;gt;pub-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert a PEM-formatted public key string to an RSA public key.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns sun.security.rsa.RSAPublicKeyImpl&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.X509EncodedKeySpec.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Takes a Base64-encoded string of key data and formats it&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   for file-output following openssl&amp;#39;s convention of wrapping lines&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   at 64 characters and appending the appropriate header and footer for&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   the specified key type&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoded&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply str &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chunked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-----BEGIN &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-----\n&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;formatted&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;\n-----END &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-----\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;private-key-&amp;gt;pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert RSA private keypair to a formatted PEM string for saving in&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   a .pem file. By default these private keys will encode themselves as PKCS#8&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   data (e.g. when calling (.getEncoded private-key)), so we have to convert it&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   to ASN1, which PEM uses (this seems to also be referred to as PKCS#1).&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   More info here http://stackoverflow.com/questions/7611383/generating-rsa-keys-in-pkcs1-format-in-java&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.asn1.pkcs.PrivateKeyInfo/getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parsePrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.toASN1Primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA PRIVATE KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key-&amp;gt;pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate PEM-formatted string for a public key. This is simply a base64&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   encoding of the key wrapped with the appropriate header and footer.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;PUBLIC KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One last note about PEM formatting and keys &amp;#8211; in some instances a PEM key is simply the same Base64-encoded DER representation of the key wrapped with the &amp;#8220;BEGIN KEY&amp;#8221; / &amp;#8220;END KEY&amp;#8221; header and footer. However the PEM format can be used slightly differently by a variety of key types, and because of this it sometimes needs to include additional metadata about what key format is being encoded.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;The ins and outs of serializing cryptographic keys can get pretty complex, and there are unfortunately a lot of ways to do things using very similar encoding formats. I&amp;#8217;ve managed to cobble together enough for the use-cases I needed here, but if you&amp;#8217;d like to understand more, &lt;a href=&quot;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&quot;&gt;here is a good article&lt;/a&gt; that goes into more depth.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hash Array Mapped Tries</title>
   <link href="http://worace.works/2016/05/24/hash-array-mapped-tries/"/>
   <updated>2016-05-24T00:00:00-07:00</updated>
   <id>http://worace.works/2016/05/24/hash-array-mapped-tries</id>
   <content type="html">&lt;p&gt;A Hash Array Mapped Trie (HAMT) is a structure for organizing arbitrary data in a broadly-branching tree. HAMTs are commonly used to build immutable Hash Maps in functional programming languages. By using a value&amp;#8217;s hash code to represent a unique &amp;#8220;path&amp;#8221; into the tree, we can build a Hash Map on top of a tree, rather than on an Array-based table as is more commonly seen. The structure is more complex than a simple Hash Table, but provides a few key benefits, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ability to grow the map indefinitely without re-sizing or chaining (no re-hashing penalties)&lt;/li&gt;
  &lt;li&gt;Ability to share repeated structure between similar trees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last point is very powerful from the perspective of copying or modifying &amp;#8211; we can represent a modified copy of a Hash Trie by duplicating any changed values but sharing the remaining (unchanged) structure with the previous tree. We get the conceptual benefits of an immutable structure but the efficiency of a traditional mutable collection.&lt;/p&gt;
&lt;p&gt;Hash Tries have been getting a lot of attention over the last several years as a means of implementing efficient immutable data structures, especially for functional programming languages. I learned about them through exploring Clojure, which uses HAMTs as the basis for its &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentHashMap.java&quot;&gt;immutable hash-maps&lt;/a&gt;. They also make an appearance in &lt;a href=&quot;https://github.com/scala/scala/blob/808f3d071e97aa23b797f2c0616c207ff1f20229/src/library/scala/collection/immutable/HashMap.scala&quot;&gt;Scala&lt;/a&gt;, &lt;a href=&quot;https://hackage.haskell.org/package/unordered-containers-0.2.7.0/docs/Data-HashMap-Strict.html&quot;&gt;Haskell&lt;/a&gt;, and Elixir.&lt;/p&gt;
&lt;h2&gt;HAMT Structure&lt;/h2&gt;
&lt;p&gt;To implement this data structure, we&amp;#8217;ll rely on a few key tools:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A Hashing Algorithm for uniquely differentiating pieces of data. Many
    languages already provide this &amp;#8211; in Ruby you can access an object&amp;#8217;s
    hashcode by calling &lt;code&gt;#hash&lt;/code&gt; on it, or you can use a hashing function
    like the &lt;code&gt;SHA1&lt;/code&gt; implementation including in the &lt;code&gt;digest&lt;/code&gt; library.&lt;/li&gt;
  &lt;li&gt;A trie with very high branching factor &amp;#8211; this lets us store lots of
    data in a very shallow (and speedy) structure.&lt;/li&gt;
  &lt;li&gt;Bitwise operations to &amp;#8220;consume&amp;#8221; the data&amp;#8217;s hash code in small chunks,
    turning a hash code into a &amp;#8220;path&amp;#8221; to the data&amp;#8217;s location in the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what does all this look like in practice? Let&amp;#8217;s look at an example
  creating a HAMT of order 32.&lt;/p&gt;
&lt;p&gt;Within the trie, each level can store 3 things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A key&lt;/li&gt;
  &lt;li&gt;An associated value&lt;/li&gt;
  &lt;li&gt;Connections to up to 32 nested child trees&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we want to insert a key-value pair, we&amp;#8217;ll use the key&amp;#8217;s hash code
  to choose a path through the trie until we find an empty position to
  insert it.&lt;/p&gt;
&lt;p&gt;For retrieval, we simply do the same thing in reverse &amp;#8211; hash the key,
  find the pathway through the trie represented by this hashcode, and
  check tree nodes until we either find the desired key or &amp;#8220;bottom out&amp;#8221; at
  the end of the tree.&lt;/p&gt;
&lt;h2&gt;Insertion Algorithm&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s walk through the insertion process in more detail.&lt;/p&gt;
&lt;p&gt;To insert a piece of data, we need to find an appropriate path in the
  trie in which to place it. As we&amp;#8217;ll see, this path is ultimately
  determined by the key&amp;#8217;s hash value.&lt;/p&gt;
&lt;p&gt;As we walk down the trie, we&amp;#8217;ll be looking for 3 possible cases:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The current trie node is empty, so we can insert our new key and
    value here&lt;/li&gt;
  &lt;li&gt;The current trie node is not empty, but its key is equal to the one
    we are trying to insert, so we can overwrite its value&lt;/li&gt;
  &lt;li&gt;The current trie node is not empty, and its key value is not equal to
    ours, so we need to go deeper in the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Insertion Case 1&lt;/h4&gt;
&lt;p&gt;Consider inserting a new K/V pair into an empty trie. We&amp;#8217;ll insert the
  key &amp;#8220;pizza&amp;#8221; with the value &amp;#8220;yum&amp;#8221;. Our trie is empty so far, so the root
  tree node has no key and value, so we can insert our pair there.&lt;/p&gt;
&lt;p&gt;Pretty easy so far.&lt;/p&gt;
&lt;h4&gt;Insertion Case 2&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s get the second easy case out of the way &amp;#8211; overwriting that K/V
  pair. We can insert the key &amp;#8220;pizza&amp;#8221; again, this time with the value of
  &amp;#8220;real yum&amp;#8221;.&lt;/p&gt;
&lt;p&gt;We find that the root node is not empty, but its key is equal to the one
  we&amp;#8217;re trying to insert, so we simply change the value.&lt;/p&gt;
&lt;p&gt;Also pretty easy.&lt;/p&gt;
&lt;h4&gt;Insertion Case 3&lt;/h4&gt;
&lt;p&gt;Here is where things start to get more interesting.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s insert the key &amp;#8220;calzone&amp;#8221; with the value &amp;#8220;aw yiss&amp;#8221;.&lt;/p&gt;
&lt;p&gt;We first check the current (root) node &amp;#8211; it does have a key and value,
  and the key is &lt;i&gt;not&lt;/i&gt; the one we&amp;#8217;re trying to insert. We need to go
  deeper into the trie to find a place for our new pair.&lt;/p&gt;
&lt;p&gt;To insert a key, we first need to generate its hash value. Again, in
  Ruby, we can use one of the hashing functions included in the Digest
  library. This gives us a (large) numeric value representing a unique
  digest of that piece of data.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;digest&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;334703588949583183218034173573122019749278332384&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To walk the trie and an appropriate location for this element, we&amp;#8217;ll
  &amp;#8220;consume&amp;#8221; this hash-code in 5-bit chunks.&lt;/p&gt;
&lt;p&gt;Why 5 bits at a time?&lt;/p&gt;
&lt;p&gt;This is determined by the branching factor of the tree &amp;#8211; with an
  order-32 trie, we have 32 possible children from each node in the tree.
  A 5-bit hash-code chunk allows us to concisely represent all 32 possible
  child branches using a single bitmap. &lt;code&gt;(=2 ** 5 == 32)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get the numeric value of the first 5 bits of our hashcode, we can
  bitwise &lt;code&gt;AND&lt;/code&gt; it with a 5-bit number containing all &amp;#8220;on&amp;#8221; bits:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;11111&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells us that the &amp;#8220;right-most&amp;#8221; 5 bits of the number
  &lt;code&gt;334703588949583183218034173573122019749278332384&lt;/code&gt; (&amp;#8220;calzone&amp;#8220;&amp;#8216;s hash code)
  are &lt;code&gt;00000&lt;/code&gt;, or 0.&lt;/p&gt;
&lt;p&gt;This tells us the position in the current node&amp;#8217;s children array to
  insert this element.&lt;/p&gt;
&lt;p&gt;Thus we can move to the &lt;code&gt;0&lt;/code&gt; th subtree under our current one and retry
  our insertion algorithm. In our case, &amp;#8220;calzone&amp;#8221; is only the second
  element to be inserted in the trie, so the =0=th child of the &amp;#8220;pizza&amp;#8221;
  node will be empty, and we can insert our data there.&lt;/p&gt;
&lt;h4&gt;Consuming the hash code&lt;/h4&gt;
&lt;p&gt;We mentioned that we would &amp;#8220;consume&amp;#8221; the key&amp;#8217;s hash code in 5-bit
  chunks. This helps us fully exploit the wide branching factor of the
  trie to insert a lot of elements in a fairly shallow data structure.&lt;/p&gt;
&lt;p&gt;If we simply re-use the same 5 (rightmost) bits that we used in the
  previous example, we effectively turn our trie into a collection of 32
  linked lists, since all elements that share an initial 5-bit value will
  stack up on one another in a chain.&lt;/p&gt;
&lt;p&gt;We would prefer to get more of a &amp;#8220;zig-zag&amp;#8221; effect, and we can achieve
  this by making sure we use a different 5-bit chunk at each layer in the
  trie.&lt;/p&gt;
&lt;p&gt;To do this, we&amp;#8217;ll use another bit-wise operator, the &lt;b&gt;right shift&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;A bitwise shift simply takes the bits that make a number and slides them in one direction or another.&lt;/p&gt;
&lt;p&gt;In the case of a left shift, we move the existing bits to the left, usually padding them with 0&amp;#8217;s on the righthand side.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;11110000&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our case, we just want to consume the next 5 bits of our hash code value, so we can use a right shift of 5 bits.&lt;/p&gt;
&lt;p&gt;Consider our &amp;#8220;calzone&amp;#8221; example from before:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now get a completely different subtrie index, helping us avoid the &amp;#8220;stacking&amp;#8221; behavior we would get if we just re-used the existing one. As we walk down the trie, we want to use this technique to shift off 5 bits at each layer.&lt;/p&gt;
&lt;h2&gt;Retrieval Algorithm&lt;/h2&gt;
&lt;p&gt;The retrieval process is effectively the same. We&amp;#8217;ll simply retrieve the
  located value rather than inserting one. Consider the same 3 cases:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The current tree node is empty &amp;#8211; this means we have &amp;#8220;bottomed out&amp;#8221;,
    so our key must not exist in the trie&lt;/li&gt;
  &lt;li&gt;The current tree node contains the key you&amp;#8217;re searching for, so
    retrieve its value.&lt;/li&gt;
  &lt;li&gt;The current tree node is not empty, but doesn&amp;#8217;t contain the key we&amp;#8217;re
    looking for. Use another 5-bit slice of the hash code to identify the
    next step to take into the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;HAMT Performance&lt;/h1&gt;
&lt;p&gt;The strength of the HAMT is its wide branching factor. The 32-bit factor is common because it can be manipulated efficiently on 32-bit processors, but you could in theory use an even larger factor if needed.&lt;/p&gt;
&lt;p&gt;This branching factor allows us to store a large amount of keys and values in a relatively shallow tree which will still be very quick to traverse.&lt;/p&gt;
&lt;p&gt;For example in just 6 layers, we could store &lt;code&gt;33,554,432&lt;/code&gt; (&lt;code&gt;32 ** 5&lt;/code&gt;, assuming the root only stores 1 pair) keys and values.&lt;/p&gt;
&lt;p&gt;Technically, the retrieval performance of our Tree will be logarithmic, as opposed to the Constant-time performance offered by traditional Hash Map implementations. However since the log base is so large, the growth flattens out very quickly and in practice isn&amp;#8217;t much worse off than a traditional hash table.&lt;/p&gt;
&lt;h1&gt;Other Considerations &amp;#8211; Structural Sharing&lt;/h1&gt;
&lt;p&gt;We mentioned the ability of our tries to potentially share duplicated
  structure with other tries. This is a common approach to creating
  immutable or &amp;#8220;persistent&amp;#8221; hash maps and is used in several functional
  languages like Clojure, Scala, and Frege.&lt;/p&gt;
&lt;p&gt;The goal for this technique is to preserve every intermediate state of
  the Map (i.e. they &amp;#8220;persist&amp;#8221;). Thus each operation on the map should
  generate a new map value rather than modifying an existing one in place.&lt;/p&gt;
&lt;p&gt;This would be problematic if we had to completely copy every node in the
  trie each time we changed anything. But because of the trie&amp;#8217;s nested
  structure, we have a better option.&lt;/p&gt;
&lt;p&gt;Whenever we need to change the trie, we duplicate the node in question
  as well as all the nodes within its path to the root.&lt;/p&gt;
&lt;p&gt;Thus we get a new root node (this represents the &amp;#8220;new&amp;#8221; Map produced by
  our operation), and a new path to the internal node that was actually
  changed.&lt;/p&gt;
&lt;p&gt;The nodes that we copy can continue referring to the other existing
  nodes so that those don&amp;#8217;t have to be copied. In practice this allows us
  to produce a &amp;#8220;copy&amp;#8221; of the entire trie by actually copying only a
  handful of nodes.&lt;/p&gt;
&lt;h1&gt;Further Reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The data structure was invented by Phil Bagwell, and you can find the original paper on it &lt;a href=&quot;http://lampwww.epfl.ch/papers/idealhashtrees.pdf&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v%3DwASCH_gPnDw&quot;&gt;Rich Hickey discussing HAMTs and other Clojure internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v%3DGibNOQVelFY&quot;&gt;ClojureWest Talk about Optimizing Clojure&amp;#8217;s Persistent Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
